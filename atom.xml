<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kaopubear.top/</id>
    <title>思考问题的熊</title>
    <updated>2019-11-08T10:01:56.444Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kaopubear.top/"/>
    <link rel="self" href="https://kaopubear.top//atom.xml"/>
    <subtitle>很高兴和你相遇&lt;br&gt;这里正在记录我的所思所学</subtitle>
    <logo>https://kaopubear.top//images/avatar.png</logo>
    <icon>https://kaopubear.top//favicon.ico</icon>
    <rights>All rights reserved 2019, 思考问题的熊</rights>
    <entry>
        <title type="html"><![CDATA[转录组表达分析知识图谱]]></title>
        <id>https://kaopubear.top//post/2019-10-11-rnaseqexpressionanalysis</id>
        <link href="https://kaopubear.top//post/2019-10-11-rnaseqexpressionanalysis">
        </link>
        <updated>2019-10-11T11:31:43.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="文章信息">文章信息</h2>
<p>Van den Berge, Koen, Katharina M. Hembach, Charlotte Soneson, Simone Tiberi, Lieven Clement, Michael I. Love, Rob Patro, and Mark D. Robinson. 2019. “RNA Sequencing Data: Hitchhiker’s Guide to Expression Analysis.” Annual Review of Biomedical Data Science 2 (1): 139–73. https://doi.org/10.1146/annurev-biodatasci-072018-021255.</p>
<p>Annual Review 系列杂志的综述应该说是综述界的老大哥。最近在 Annual Review of Biomedical Data Science 发表了「另」一篇 RNA-Seq 相关的重磅综述。之所以说是另一篇，因为同期在 Nature Reviews Genetics 发表过一篇看名字就非常霸气的综述：RNA sequencing: the teenage years 。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="文章信息">文章信息</h2>
<p>Van den Berge, Koen, Katharina M. Hembach, Charlotte Soneson, Simone Tiberi, Lieven Clement, Michael I. Love, Rob Patro, and Mark D. Robinson. 2019. “RNA Sequencing Data: Hitchhiker’s Guide to Expression Analysis.” Annual Review of Biomedical Data Science 2 (1): 139–73. https://doi.org/10.1146/annurev-biodatasci-072018-021255.</p>
<p>Annual Review 系列杂志的综述应该说是综述界的老大哥。最近在 Annual Review of Biomedical Data Science 发表了「另」一篇 RNA-Seq 相关的重磅综述。之所以说是另一篇，因为同期在 Nature Reviews Genetics 发表过一篇看名字就非常霸气的综述：RNA sequencing: the teenage years 。</p>
<!--more-->
<figure data-type="image" tabindex="1"><img src="https://kaopubear-1254299507.cos.ap-shanghai.myqcloud.com/picgo/20191011192144.png" alt=""></figure>
<figure data-type="image" tabindex="2"><img src="https://kaopubear-1254299507.cos.ap-shanghai.myqcloud.com/picgo/20191011192145.png" alt=""></figure>
<p>关于 RNA Sequencing Data: Hitchhiker's Guide to Expression Analysis 这篇综述，它重点关注在** RNA-seq 数据的表达分析方法**，**因此适合用来做转录组数据分析能力的自我检测和学习路径。**这篇文章从转录组数据的整体介绍开始，从比对定量、差异表达基础、差异分析种类，单细胞转录组和长读数转录组几个层面展开，重点在比对定量、差异表达基础、差异分析种类这三部分。作者根据分析步骤介绍了对应的大量分析工具和其使用的计算模型和优势。本文不会对文章进行翻译，只是重点指出我读后比较关注的一些细节。<strong>最后我也会按照综述的主线梳理出主要内容，理出一幅转录组表达分析的知识地图。</strong></p>
<h2 id="整体介绍">整体介绍</h2>
<p>下图是一个转录组试验的标准试验流程。</p>
<figure data-type="image" tabindex="3"><img src="https://kaopubear-1254299507.cos.ap-shanghai.myqcloud.com/picgo/20191011192149.png" alt=""></figure>
<p>在建库的过程中，常见文库形式包括单端和单端测序，同时还有非链特异性和链特异性测序。在实验设计方面，有两个比较重要的因素：重复数量和测序深度。如下图所示，最近若干年来，大多数转录组测序的数据 reads 数量都是从 10 到 100M 之间，而样本数量基本上就是每个条件三个重复，很多项目的样本数量在 8 个（中位数）左右。</p>
<figure data-type="image" tabindex="4"><img src="https://kaopubear-1254299507.cos.ap-shanghai.myqcloud.com/picgo/20191011192150.png" alt=""></figure>
<p>通常认为，增加测序深度可以提高后期分析的表现。不过，其实非常大的一部分 reads 都来自少数一些表达量很高的基因。具体到统计数字上，超过 80%的 reads 都来自 10%表达量最高的基因，如下图所示。因此，增加 reads 其实只是非常有限的增加了低表达基因的覆盖率。在检查差异表达基因的统计效力上并没有非常明显的提升。<strong>因此，增加测序深度不如多增加几个重复</strong>。有数据表明，如果想要鉴定低 fold change 的基因，最好能够做到 6 个重复。</p>
<figure data-type="image" tabindex="5"><img src="https://kaopubear-1254299507.cos.ap-shanghai.myqcloud.com/picgo/20191011192146.png" alt=""></figure>
<p>转录组测序在应用层面可以进行基因注释，这里的注释包括各种各样的转录相关事件，例如 exon skipping, alternative 3' acceptor, 5' donor<br>
sites 以及 intron retention 等等。在基因调控方面，转录组数据可以在各种各样的条件下进行各种各样层面的比较，例如基因、转录本和外显子。当然，还有单细胞转录组的一系列应用场景等等。</p>
<h2 id="关于定量和比对">关于定量和比对</h2>
<p>转录组得到的测序数据通常被称为 junction-spanning reads， 目前针对这样的 reads 有两种最主要的比对思路，一种是使用 spliced alignment 的方法比对到参考基因组，另一种是使用 direct alignment 的方法直接比对到转录组上。往参考基因组比对的方法对应的工具有很多，最早从 DNA 比对进化来的工具例如 bowtie 等，后期发展出来的 STAR, HISAT 和 Subread 以及 GMAP。这种类型的比对一个关键点是对于 splice junctions 的识别。比对到转录组，主要挑战是关于 related isoforms 转录本的区分，这个问题可能会导致大量 multimapping 的情况发生。例如一个基因有三个转录本，其中一个外显子序列可能在三个转录本中都出现。同时，比对到参考转录组也不能找到 find novel splicing 和 expression pattern。因此，到底选择哪种比对方式取决于自己的后续分析需求。关于定量，常见的有基于基因的定量和基因转录本的定量。每种定量方式都有基于不同模型的若干种方法，随着分析的逐渐深入，越来越多的分析从基于基因定量转换为基于转录本定量。</p>
<h2 id="差异分析基础">差异分析基础</h2>
<p>下图是一个常规的差异分析步骤。</p>
<figure data-type="image" tabindex="6"><img src="https://kaopubear-1254299507.cos.ap-shanghai.myqcloud.com/picgo/20191011192148.png" alt=""></figure>
<h2 id="各种差异表达">各种差异表达</h2>
<p>和定量的方式相对应，差异表达的分析角度其实也有很多种。除了常见的差异基因表达之外，还有差异表达的转录本，以及在一个基因内部不同转录本的使用情况，在一些情况下，即便一个基因在两种不同的条件下没有表达上的明显差异，但是可能存在不同转录本的表达变化。下图是一个比较直观的说明。</p>
<figure data-type="image" tabindex="7"><img src="https://kaopubear-1254299507.cos.ap-shanghai.myqcloud.com/picgo/20191011192147.png" alt=""></figure>
<p>更多细节可以阅读综述原文，送上根据综述这里的知识图谱</p>
<h2 id="表达分析知识图谱">表达分析知识图谱</h2>
<figure data-type="image" tabindex="8"><img src="https://kaopubear-1254299507.cos.ap-shanghai.myqcloud.com/picgo/20191011193739.png" alt=""></figure>
<hr>
<figure data-type="image" tabindex="9"><img src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png" alt=""></figure>
<p><strong>本文作者</strong>：思考问题的熊</p>
<p><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-nd/4.0">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议 (CC BY-NC-ND 4.0)</a> 进行许可。</p>
<figure data-type="image" tabindex="10"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190628083754.png" alt="扫码即刻沟通"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[船新版本 DESeq2 处理大量样本速度显著提升]]></title>
        <id>https://kaopubear.top//post/2019-09-17-fasterdeseq2</id>
        <link href="https://kaopubear.top//post/2019-09-17-fasterdeseq2">
        </link>
        <updated>2019-09-17T12:15:31.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="太长不看版本">太长不看版本</h2>
<p>DESeq 最新版本（v1.25.9）针对大样本分析的速度和之前相比有了质的飞越，果子老师的 1215 个 TCGA 样本差异分析时间从 1200 分钟缩短到单线程 20 分钟，使用多线程的情况下最快 6 分钟搞定。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="太长不看版本">太长不看版本</h2>
<p>DESeq 最新版本（v1.25.9）针对大样本分析的速度和之前相比有了质的飞越，果子老师的 1215 个 TCGA 样本差异分析时间从 1200 分钟缩短到单线程 20 分钟，使用多线程的情况下最快 6 分钟搞定。</p>
<!--more-->
<h2 id="前奏">前奏</h2>
<p>前一段时间洲更用统计学中的非参数检验方法解决了果子老师关于 1200 个 TCGA 样本使用 DESeq2 分析耗时 20 小时的问题，然后在那篇文章的最后果子老师如此总结道：</p>
<blockquote>
<p>这样看来，洲更说的是对的。不过，dds 这里还有一个比较好的点就是可以做 logFC 矫正，就像这个帖子里面提到的，有一些 count 比较小，但是变化值很大的基因，会对 GSEA 分析产生影响。</p>
</blockquote>
<p>从这段话里可以看出他还是心心念念 DEseq2。念念不忘必有回响，DEseq2 开发者听到了果子老师心里的呐喊，最近一次 GitHub 上 DEseq2 的更新就着手解决了这个问题。这段代码的贡献者称他们解决了 DEseq2 处理大量样本异常耗时问题，时间随样本量的变化趋势目前已经做到了线性关系。</p>
<p>对比图如下：</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190917200938.png" alt=""></figure>
<p>究竟效果如何，接下来就用果子老师 1215 个样本数据去测试。</p>
<h2 id="台式机多线程测试">台式机多线程测试</h2>
<p>第一次测试环境我选择了自己的台式机，16G 内存。不知道是出于对开发者的信任还是对电脑的信任或者是出于对果子老师代码的信任。我选择了直接复制了果子老师的代码开启并行模式进行分析。</p>
<p>在果子老师的当年的描述中，如此说道：</p>
<blockquote>
<p>最困难的一步来了。燃烧你的小电脑。这里还使用了并行化处理来解决速度的问题。但是，耗时依然很长，4 个小时以上，有可能是 10 个小时</p>
</blockquote>
<p>（后来，据我私下和果子老师交流，他说实际运行时间远远高于 4 小时，为了显示出自己机器性能的优越稍微在写作手法上做了一些加工，人为缩短了这个时间）</p>
<p>这里我并不知道果子老师小电脑的性能如何以及用了几个线程，姑且按照 4 个小时（240 分钟）来计算。首先要从 GitHub 安装最新版本的包，安装好之后查看包的版本是 1.25.9，没有问题。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190917200940.png" alt=""></figure>
<p>以下是测试步骤，原始的 Rdata 来自果子老师，用构建好的 dds 直接做<code>DESeq</code>。</p>
<pre><code class="language-R">devtools::install_github(&quot;mikelove/DESeq2@ae7c6bd&quot;)
library(DESeq2)
library(BiocParallel)
dds &lt;- DESeq(dds,parallel = T)
</code></pre>
<p>DESeq 虽然只是一个函数其实包含了若干个步骤，其中耗时很严重的是<code>gene-wise dispersion estimates</code>，这里也是多线程开启的地方。R 自动在我的台式机上开启了 6 个线程。起初我非常开心，新版本<code>gene-wise dispersion estimates</code> 这一步很快完成，目测只有不到 5 分钟。看情况不出问题的话，全部分析应该会在 10 分钟左右完成。</p>
<p>然后我就看了眼电脑的任务管理器，如下图所示。</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190917200943.png" alt=""></figure>
<p>接下来，就出问题了。因为 6 个线程工作再加上电脑只有 16G 内存，<code>fitting model and testing</code>到一半时我的心态伴随着内存一起都崩了。<strong>到崩溃为止，一共运行了大约 11 分钟。</strong></p>
<pre><code>&gt; dds &lt;- DESeq(dds,parallel = T)
estimating size factors
estimating dispersions
gene-wise dispersion estimates: 6 workers
mean-dispersion relationship
final dispersion estimates, fitting model and testing: 6 workers

error: arma::memory::acquire(): out of memory
Error: BiocParallel errors
  element index: 4
  first error: std::bad_alloc
In addition: There were 13 warnings (use warnings() to see them)
&gt; proc.time() - t1
   user  system elapsed
  42.21  253.32  702.48
</code></pre>
<h2 id="服务器多线程测试">服务器多线程测试</h2>
<p>事已至此，勿忘初心，迁移到服务器上去试试。在服务器安装最新版本的 DEseq2 包，继续运行同样内容，并行开启后，这次自动给我分配了 36 个线程，真棒！</p>
<p>接下来一切正常，运行时间如下所示：</p>
<pre><code>&gt; dds &lt;- DESeq(dds,parallel = T)
estimating size factors
estimating dispersions
gene-wise dispersion estimates: 38 workers
mean-dispersion relationship
final dispersion estimates, fitting model and testing: 38 workers
-- replacing outliers and refitting for 9759 genes
-- DESeq argument 'minReplicatesForReplace' = 7
-- original counts are preserved in counts(dds)
estimating dispersions
fitting model and testing
&gt; proc.time() - t1
    user   system  elapsed
1720.880  207.212  379.153
</code></pre>
<p><strong>全程跑完一共用时 6 分钟多一点</strong>，和之前果子老师的多线程 4 个多小时的时间比，速度提升了应该有 40 多倍的样子。这里再次强调一下，据我私下和果子老师交流实际运行时间远远要高于 4 小时哦。如此看来，文章开头的运行时间对比图还比较靠谱，线性时间的复杂度大大缩短了处理大量样本的时间。</p>
<h2 id="单线程测试">单线程测试</h2>
<p>随后，测试如果只开启一个线程的情况（现在很少有单线程的机器，但是不少人都不知道 DEseq 可以多线程运行），如果不用最新版的话，据一些学员反映这个时间是在 20 到 30 个小时之内，如果用了最新版呢？<strong>单线程整个时间缩短到 22 分钟左右</strong>。（从一个侧面来说，这里的多线程加速效果也并不是非常明显。）</p>
<pre><code>&gt; dds &lt;- DESeq(dds,parallel = F)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
final dispersion estimates
fitting model and testing
-- replacing outliers and refitting for 9759 genes
-- DESeq argument 'minReplicatesForReplace' = 7
-- original counts are preserved in counts(dds)
estimating dispersions
fitting model and testing
&gt; proc.time() - t1
    user   system  elapsed
1369.724   18.084 1387.730
</code></pre>
<h2 id="分析结果完全一致">分析结果完全一致</h2>
<p>从下文会提到的开发者更改内容来看，这次更新提速并没有更改涉及到 DEseq2 模型和参数的内容，所以新老版本的分析结果是完全一致的，包括差异基因的个数和 p 值。</p>
<pre><code>contrast &lt;- c(&quot;sample&quot;,&quot;cancer&quot;,&quot;normal&quot;)
dd1 &lt;- results(dds, contrast=contrast, alpha = 0.05)
library(dplyr)
library(tibble)
library(tidyr)
### 导出差异分析的结果
res &lt;- dd1 %&gt;%
  data.frame() %&gt;%
  rownames_to_column(&quot;gene_id&quot;)
&gt; table(res$padj &lt; 0.01)

FALSE  TRUE
20502 25189
</code></pre>
<h2 id="究竟改了什么">究竟改了什么</h2>
<p>回到文章开头，这次的升级当然不是听到果子老师远在他乡用微信公众号发出的呼唤，而是开发者为了让 DEseq2 可以更好的处理单细胞数据而准备的。在传统的差异分析问题上，我们面对的是高深度和少量几个样本，但是在单细胞上，面对的是上千个细胞和相对很浅的测序深度。</p>
<p>代码贡献者在自己的博客中提到，在几年前大家都还在争论转录组测序数据中大量 count 为 0 的数据应该如何处理，但是最近已经有阴性对照的实验数据表明这些 0 并不会有什么问题。另外，已经有文章测试表明，传统差异分析的很多工具在单细胞数据中依旧可以使用，甚至要比一些专门为单细胞开发的工具表现要好。如下图所示：</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190917200947.png" alt=""></figure>
<p>但是 DESeq2 开发者的实验室发现，DESeq2 和其他一票软件相比，在处理大量细胞时速度上完败，细胞越多败的越彻底。作为差异分析工具的大哥，当然也是要面子的。于是决定找出问题进行优化。</p>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190917200949.png" alt=""></figure>
<p>对于代码改动，可以从 GitHub 的 PR 中略知一二。</p>
<p>以下是 R 脚本的一个优化示例：</p>
<p>在<code>core.R</code>中，旧版本的代码如下图所示</p>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190917204043.png" alt=""></figure>
<p>新版本中对应的代码如下图所示：</p>
<figure data-type="image" tabindex="7"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190917203940.png" alt=""></figure>
<p>单独看几行代码可能有些难以理解，在这里尽力解释一下。</p>
<p>上面代码提到的 <code>modelMatrix</code> 参数来自于<code>getModelMatrix()</code>这个函数，内容如下：</p>
<pre><code class="language-R">getModelMatrix &lt;- function(object) {
  if (is(design(object), &quot;matrix&quot;)) {
    design(object)
  } else if (is(design(object), &quot;formula&quot;)) {
    stats::model.matrix.default(design(object), data=as.data.frame(colData(object)))
  }
}
</code></pre>
<p>其中的参数<code>object</code>就是我们实际数据中的 dds，这里首先判断 design(object) 的数据类型，以果子老师的数据为例。</p>
<pre><code class="language-r">&gt; is(design(dds))
[1] &quot;formula&quot;  &quot;oldClass&quot;
</code></pre>
<p>果子老师的数据中<code>design(object)</code> 是 formula，那么就会运行<code>stats::model.matrix.default(design(object), data=as.data.frame(colData(object)))</code>来得到 ModelMatrix</p>
<p>实际运行<code>getModelMatrix()</code>我们得到的 <code>modelMatrix</code>其实是一个 1215*2 的矩阵。</p>
<figure data-type="image" tabindex="8"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190917204139.png" alt=""></figure>
<p>如下图所示，第二列<code>samplecancer</code>就是分组信息，其中 0 代表正常，1 代表癌。</p>
<p>原始的<code>metadata</code> 中的样本数量如下</p>
<pre><code class="language-R">&gt; table(metadata$sample)

normal cancer
   113   1102
</code></pre>
<p>ModelMatrix 中第二列的样本情况</p>
<pre><code class="language-R">&gt; table(modelMatrix[,2])

   0    1
 113 1102
</code></pre>
<p>而 <code>nOrMoreInCell</code>函数的作用是返回一个每个样本一一对应的逻辑向量，来表明是否需要被筛选掉。这里又需要提到一个参数<code>minReplicatesForReplace</code>。</p>
<p>这个参数，可能大多数人都不会被注意到。他的含义是 the minimum number of replicates required in order to use replaceOutliers on a sample.</p>
<p>那么<code>replaceOutliers()</code>又是做什么的呢？我们说 DEseq 在进行标准化的时候会丢掉一些 gene counts 数非常异常的值，转而使用所有样本中的 trimmed mean 来进行替代。<code>replaceOutliers()</code>就是做这件事的。</p>
<p>书接上文，<code>minReplicatesForReplace</code> 就指定了在对一个样本使用 replaceOutliers 的时候需要最小的重复数是多少。假如这个值是 5，如果你的一个样本只有 3 个重复，那么就不会执行上面的操作。这个参数默认是 7，假设你不想做这一步（例如针对单细胞数据），你就需要把这个参数设置为 Inf。在实际运行中，如何判断哪个样品该进行哪些样品不该进行这些操作呢？就是进行如下一个比较，下文代码的第一行也展示了<code>nOrMoreInCell()</code>的作用。</p>
<pre><code class="language-R">  # if there are sufficient replicates, then pass through to refitting function
  sufficientReps &lt;- any(nOrMoreInCell(attr(object,&quot;modelMatrix&quot;),minReplicatesForReplace))
  if (sufficientReps) {
    object &lt;- refitWithoutOutliers(object, test=test, betaPrior=betaPrior,
                                   full=full, reduced=reduced, quiet=quiet,
                                   minReplicatesForReplace=minReplicatesForReplace,
                                   modelMatrix=modelMatrix,
                                   modelMatrixType=modelMatrixType)
  }
</code></pre>
<p>扯远了，再说回来，<code>nOrMoreInCell()</code> 是如何在新版本中提速的。</p>
<pre><code class="language-R">nOrMoreInCell_old &lt;- function(modelMatrix, n) {
  numEqual &lt;- sapply(seq_len(nrow(modelMatrix)), function(i) {
    modelMatrixDiff &lt;- t(t(modelMatrix) - modelMatrix[i,])
    sum(apply(modelMatrixDiff, 1, function(row) all(row == 0)))
  })
    numEqual &gt;= n
}
</code></pre>
<p>到这里很可能你已经看不下去了，但是其实不难理解。</p>
<p>原始函数使用<code>sapply</code>在每个样品上都要迭代一次，因此如果的设计矩阵很简单就会出现大量的重复工作。对于大量样本这个函数占用 DESeq（）相当一大部分运行时间。对于 1200 个样本的数据来说，这个过程要重复 1200 次才能得到结果。</p>
<p>如果变成新的函数会有什么效果呢？</p>
<pre><code class="language-R">nOrMoreInCell_new &lt;- function(modelMatrix, n){
  numEqual &lt;- rep(NA, nrow(modelMatrix))
  for(idx in seq_len(nrow(modelMatrix))){
    if(is.na(numEqual[idx])){
      modelMatrixDiff &lt;- t(t(modelMatrix) - modelMatrix[idx,])
      equal_to_idx &lt;- apply(modelMatrixDiff, 1, function(row) all(row == 0))
      numEqual[equal_to_idx] &lt;- sum(equal_to_idx)
    }
  }
  numEqual &gt;= n
}
</code></pre>
<p>首先给 <code>numEqual</code> 全部复制为<code>NA</code>；当进行第一次循环<code>idx=1</code>时，因为<code>numEqual[idx]</code>是<code>NA</code>，所以一定会执行一次运算。</p>
<p>但是只要进行一次运算，<code>equal_to_idx</code> 就会返回一个新的逻辑值，所有<code>equal_to_idx</code>为真的位置对应的<code>numEqual</code>的位置都会被赋值这个样本重复的数量，也就是<code>sum(equal_to_idx)</code>。然后第二次循环开始，对于和第一次循环同样组的样本来说，只需要进行<code>if(is.na(numEqual[idx]))</code> 的判断，因为必定会返回<code>False</code> 就不需要再进行后续运算了。</p>
<p>以果子老师的数据为例， 他只有两组数据，1215 个样本。只需要进行一次运算，完成相当于原始函数的 1102 次计算（癌有 1102 个），然后循环到下一个是 NA 的样本时（也就是第一个正常样本时），再进行一次运算，就完成了原始函数的 113 次计算。</p>
<p><strong>也就是当面对 2000 个样本的 2 组数据时，原始函数需要运行 2000 次，而新的函数只需要运行 2 次。</strong></p>
<p>在 1215 个样本的 2 组数据中，前者需要 3.17s，而后者只需要 0.03s。</p>
<pre><code>&gt; t1 &lt;- proc.time()
&gt; samplesForCooks &lt;- nOrMoreInCell_new(modelMatrix,3)
&gt; proc.time() - t1
   user  system elapsed
   0.00    0.02    0.03
&gt;
&gt; t1 &lt;- proc.time()
&gt; samplesForCooks &lt;- nOrMoreInCell_old(modelMatrix,3)
&gt; proc.time() - t1
   user  system elapsed
   3.06    0.08    3.17
</code></pre>
<p>当然，直接导致时间复杂度改变的升级是在核心的 C 脚本中，我也只能勉强读懂一些。</p>
<figure data-type="image" tabindex="9"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190917204204.png" alt=""></figure>
<p>在原始的 <code>DESeq2.cpp</code>中有一步需求是提取对角线矩阵。原代码首先构造了一个 n 行 n 列的矩阵，然后再对整个矩阵进行运算，最后再用<code>diagvec()</code>来提取对角线矩阵，这个思路没什么问题，但是随着样本数量的增加，对于矩阵的运行时间是成样本数的平方增加的，遇到大量样本直接歇菜。</p>
<p>但在新的代码中，避免了对于这个矩阵的计算。取代构造矩阵而是首先构造了一个 n 维向量，接下来不需要对全部矩阵进行计算就也可以得到对角线矩阵。这一步上的时间复杂度，就从之前的 <code>O(ncol(Y)^2)</code> 变成了 <code>O(ncol(Y))</code>的线性复杂度。这也是我们看到文章开始运行时间变化的主要原因。</p>
<h3 id="进一步了解">进一步了解</h3>
<p><a href="https://doi.org/10.1038/nmeth.4612">Bias, robustness and scalability in single-cell differential expression analysis</a></p>
<p><a href="https://const-ae.name/post/need_for_speed-deseq2/">Need for Speed — DESeq2</a></p>
<hr>
<figure data-type="image" tabindex="10"><img src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png" alt=""></figure>
<p><strong>本文作者</strong>：思考问题的熊</p>
<p><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-nd/4.0">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议 (CC BY-NC-ND 4.0)</a> 进行许可。</p>
<figure data-type="image" tabindex="11"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190628083754.png" alt="扫码即刻沟通"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zotero入门学习路径]]></title>
        <id>https://kaopubear.top//post/2019-09-11-howtolearnzotero</id>
        <link href="https://kaopubear.top//post/2019-09-11-howtolearnzotero">
        </link>
        <updated>2019-09-11T10:17:37.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="相关内容简述">相关内容简述</h2>
<p>学术文献管理和阅读工具其实主要包括管理和阅读两个需求。</p>
<p>所谓管理主要有三个层面的需求，一个是方便的把文献放到工具中去，然后可以提取出准确丰富的文献信息；另一个是可以把需要引用的文献方便的在写作工具中插入；第三个就是快速的找到自己想要的文献。阅读的话就是各种高亮和笔记的操作以及管理。同时还有不同平台同步的需求。</p>
<p>目前常用的文献管理工具有很多，比较有代表性的如下几个：</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="相关内容简述">相关内容简述</h2>
<p>学术文献管理和阅读工具其实主要包括管理和阅读两个需求。</p>
<p>所谓管理主要有三个层面的需求，一个是方便的把文献放到工具中去，然后可以提取出准确丰富的文献信息；另一个是可以把需要引用的文献方便的在写作工具中插入；第三个就是快速的找到自己想要的文献。阅读的话就是各种高亮和笔记的操作以及管理。同时还有不同平台同步的需求。</p>
<p>目前常用的文献管理工具有很多，比较有代表性的如下几个：</p>
<!--more-->
<h3 id="endnote">Endnote</h3>
<p>https://endnote.com/ 一款最知名的文献管理工具，付费价格相对较贵但是多数高校和科研机构购买过可以使用。（从个人层面而言仅仅是偶尔使用过几回，没有太多体会，所以有经验的小伙伴不要吝啬分享这个软件的优缺点和使用体验）</p>
<h3 id="mendeley">Mendeley</h3>
<p>Mendeley <a href="https://www.mendeley.com/">https://www.mendeley.com</a></p>
<p>2013年从开源软件身份被 Elsevier 高价收购，目前背靠大树。我现在主用Zotero，辅助Mendeley。</p>
<p>个人认为Mendeley有如下几个主要优点：</p>
<ol>
<li>真 全平台：Web, Mac, Linux, Windows, iOS, Android 所有文献随时随地阅读。</li>
<li>真 实时全同步：<strong>免费2G存储空间</strong>（Zotero 300M）,约 1000 千篇文献的免费存储空间对于大多数人足够了，文献要及时整理删减，当成网盘用就是你的不对了。</li>
<li>真 智能：浏览器插件自动保存文献，自动监听本地文件夹，电脑客户端本地 pdf 文件直接拖入软件后<strong>自动检测</strong>论文条目，识别率极高。根据已有文献推荐相关其它文献。</li>
<li>团队，社交及推荐属性：网站注册后可以关注和被关注（类似于 ResearchGate），按照研究领域推荐好友，创建或加入小组分享文献。</li>
<li>内置PDF阅读器：支持复制高亮和批注，支持对整个文献记录笔记。</li>
<li>多种数据导入导出格式：支持批量导入各种数据库文件（比如 Zotero），word 插件文献导入，支持多种格式引用格式导出，比如 BibTeX。</li>
<li>使用门槛和EndNote与Zotero相比非常低，几乎没有学习成本。</li>
<li>好看，手机客户端和网页颜值较高。</li>
</ol>
<p>缺点：内置阅读器不够强大，分辨率也不是很高；不支持类Zotero多附件插入和树状目录，和Zotero 相比笔记功能比较简陋。</p>
<h3 id="zotero">Zotero</h3>
<p>Zotero https://www.zotero.org/</p>
<p>目前是我的主用工具，具体的介绍见下一部分内容即可。</p>
<h3 id="f1000-workspace">F1000 workspace</h3>
<p>F1000 workspace 是 F1000 旗下的一款产品，和其他几个工具不同。可以说F1000 workspace 是唯一一个真 web 工具。不需要本地客户端，PDF可以直接上传并通过浏览器阅读和标注，在任何地方只要有一个浏览器就可以使用。</p>
<p>官网有如下一段介绍：</p>
<blockquote>
<p>F1000Workspace is the latest offering from F1000 and provides a unified workspace for scientists to collect, write &amp; discuss scientific literature. It features a web-based application, a browser extension, powerful word processing plugins and a mobile application. It includes key article recommendations by our faculty of over 8,000 leading experts in biology and medicine and links to our Open Science publishing platform, F1000Research.</p>
</blockquote>
<p>其主要特点是<strong>结合 F1000 的推荐功能和社交属性</strong>，可以说是一款相对更加有现代感的工具。如果你已经厌倦了传统的文献管理工具。F1000 workspace 绝对是一个不错的新选择。</p>
<p>不过这款工具也是订阅制的，你可以通过 https://f1000.com/work/institution-check 这个网页通过输入所在机构的邮箱来查看自己的高校或者研究单位是否进行了订阅。如果是如下这种效果，那么就可以使用它的全部功能且不受任何限制。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163844.png" alt=""></figure>
<p>虽然这款工具不做具体的介绍，但是你可以在 https://f1000.com/work/#/faq 查看使用说明。</p>
<h2 id="代表性工具介绍-zotero">代表性工具介绍 Zotero</h2>
<p>本周一起学习的代表性工具介绍为 Zotero，在官方网站有一篇文章专门剖析了<a href="https://www.zotero.org/why">为什么要是用Zotero</a></p>
<h3 id="选择zotero进行学习的主要原因">选择Zotero进行学习的主要原因</h3>
<ul>
<li>软件本身完全免费并且开源，不存在盗版问题，开发进度透明可参与</li>
<li>注册后本身包括300M空间同步，但支持WebDAV例如 Dropbox 和坚果云等。</li>
<li>官方的反馈论坛活跃有问题可以快速得到反馈</li>
<li>从网站，期刊文章等提取保存出版物数据，或者检索拖入PDF的出版物数据</li>
<li>可以和Word，LibreOffice和Google Docs集成方便文献进一步的使用管理</li>
<li>强大的第三方插件系统</li>
</ul>
<h3 id="zotero-的缺点">Zotero 的缺点</h3>
<p>使用一个工具首先要了解工具的上限和下限，Zotero同样有着比较明显的短板。</p>
<ul>
<li>
<p>因为强大所以有时略显复杂</p>
</li>
<li>
<p>并不是一个完全基于web的工具（和 F1000 workspace等工具相比）</p>
</li>
<li>
<p>没有内置的PDF阅读工具</p>
</li>
<li>
<p>没有适配于iOS和Android的官方应用程序</p>
</li>
<li>
<p>没有所谓的VIP私人服务和支持</p>
</li>
</ul>
<h2 id="学习路径">学习路径</h2>
<p>最权威和最新的学习资料一定是官方文档 https://www.zotero.org/support/</p>
<p>目前文档有中文的版本，但是针对 Zotero 4.0 ,如果英文吃力也可以参考 https://www.zotero.org/support/zh/start</p>
<h3 id="添加内容到文献库">添加内容到文献库</h3>
<p><strong>使用浏览器插件</strong></p>
<p>https://www.zotero.org/download/</p>
<p>不同于一些工具的浏览器插件，zotero的浏览器插件称得上可以「保存一切」。当你所在的网页呈现出不同的内容是，zotero的插件会呈现出不同的图标。例如如果打开的是PDF那么图标就会变成PDF，如果你打开的是一个有文献的页面，就会出现一个文献的图标。如果一个网页内有多个文献元数据，可以检测到同时保存多篇文章。即便是一篇博客，也可以直接保存。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163848.png" alt=""></figure>
<p>下图为直接保存博客网页的效果，可以看到也会抓取部分内容作为摘要显示。</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163850.png" alt=""></figure>
<p>如果你好奇zotero支持导入的内容包括什么，可以参考下面这个截图。</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163854.png" alt=""></figure>
<p><strong>使用各种标识符在应用内添加</strong></p>
<p>对于添加文献或者书籍，如果你知道了它对应的 ISBN，DOI 或 PubMed ID，则可以快速将项目通过标识符添加到库中。</p>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163857.png" alt=""></figure>
<p>请单击zotero窗格中间列顶部的“按标识符添加项目”按钮，输入标识符，然后按Enter。要一次输入多个标识符，输入第一个标识符后按 Shift + Enter，然后输入其余标识符（每行一个），通过 enter 换行，输入所有标识符后，按Shift + Enter 一次导入所有项目。如下图所示</p>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163859.png" alt=""></figure>
<p><strong>本地PDF文件和各种附件直接拖入应用</strong></p>
<p>如果你有已经下载好的PDF版本文献，只要直接拖入到应用中即可，zotero会自动识别PDF文档中的元数据。</p>
<p>对于任意格式的附件，例如文章中的代码等内容。都可以通过右键单击Zotero项目选择“添加附件”或单击Zotero工具栏中的回形针图标，将添加文件添加为现有Zotero项目的附件。</p>
<p><strong>从其它工具导入</strong></p>
<p>zotero 支持从多种工具的数据导入，且支持的导入格式非常丰富。例如 mendeley 的数据库，endnote的xml格式，以及常见的RDF和RIS格式等等。更多格式见下图截图。</p>
<figure data-type="image" tabindex="7"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914164354.png" alt=""></figure>
<p><strong>通过feed进行订阅</strong></p>
<p>如果你是一个喜欢追文献的人，肯定有各种各样自己的方法，例如通过右键订阅或者RSS等等。其实zotero本身就为你提供了一种非常方便的方法。</p>
<figure data-type="image" tabindex="8"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163903.png" alt=""></figure>
<p>例如点击URL，你可以将一些杂志主页提供的URL地址直接添加到这里，并且进行更多高级设置，例如更新时间和删除时间等等。</p>
<figure data-type="image" tabindex="9"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163905.png" alt=""></figure>
<h3 id="文献和笔记管理">文献和笔记管理</h3>
<p><strong>文献组织形式和分类：集合与标签</strong></p>
<p>可以理解为支持多个层级的文件夹，如下为在一个合集中新建一个子集。</p>
<p>除了按照目录分类以外，可以为每个文献添加若干个标签。这里建议标签的纬度不要和集合的维度重合。例如，我有个一个叫做「lncRNA」的目录集合，就不应该再建立一个「lncRNA」的标签了，这时的标签可以是用途维度，或者是重要性维度。例如使用P1 P2 P3 标注文献的重要性，或者使用「中期」「答辩」等标注一个文献的可能用途。</p>
<p>每个标签可以设置其对应的颜色，这个色块也会自动显示在每一个条目的开头，方便查看一目了然。如下图所示：</p>
<figure data-type="image" tabindex="10"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163907.png" alt=""></figure>
<p><strong>搜索</strong></p>
<p>快速搜索支持三种粒度的搜索方法，如下图所示。需要说明的是，如果你的PDF文档已经建立了所以，通过所有内容进行搜索时是可以搜索到PDF文档中的文本的。</p>
<figure data-type="image" tabindex="11"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163910.png" alt=""></figure>
<p>除了快速搜索以外，zotero中还有一种高级搜索方法。</p>
<p>高级搜索提供比快速搜索更多更精细的筛选条件，并允许保存搜索内容方便下次使用。</p>
<p>运行高级搜索徐要打开“高级搜索”窗口，单击中心窗格顶部的放大镜图标。然后就会进入搜索界面，搜索支持逻辑判断，可以搜索的条目也非常之多。</p>
<figure data-type="image" tabindex="12"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163915.png" alt=""></figure>
<p><strong>排序和关联</strong></p>
<p>每个集合都支持显示若干你需要的条目并且按照需要的方式进行排序，更重要的是还支持二次排序。</p>
<figure data-type="image" tabindex="13"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914164611.png" alt=""></figure>
<p>另外，不同的文献之间，文献和笔记之间都可以进行关联。</p>
<figure data-type="image" tabindex="14"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163915.png" alt=""></figure>
<p>我们可以方便的把认为关联性强的内容结合到一起。</p>
<p><strong>笔记</strong></p>
<p>如下图所示，每一篇文献支持插入多个笔记。笔记支持的格式内容也非常丰富，例如引用和插入链接以及添加不同层级的标题都没有问题。而且笔记还可以和多篇文献进行关联。</p>
<figure data-type="image" tabindex="15"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163921.png" alt=""></figure>
<h3 id="生成引文和报告">生成引文和报告</h3>
<p>无论是使用endnote还是使用medeley，亦或者使用zotero，有一个非常重要的需求就是在平时写各种论文的过程中插入一些参考文献。zotero 可以从哪些方便满足你的需求呢？</p>
<figure data-type="image" tabindex="16"><img src="https://qqadapt.qpic.cn/txdocpic/0/772594da5448368683951e45e6bf8097/0" alt="img"></figure>
<p><strong>快速复制</strong></p>
<p>如果你只是希望在自己的博客或者笔记中插入一些文章而无需遵守严格的位置要求。那么zotero 本身提供了非常方便的快速复制方法。</p>
<p>在设置中你可以设置复制时需要的引文格式，然后只需要拖拽即可，非常自由。</p>
<figure data-type="image" tabindex="17"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163923.gif" alt=""></figure>
<p><strong>多篇文献右键多种导出</strong></p>
<p>当你同时选择多篇文献时，也可以通过鼠标右键选择你需要导出的形式。例如RTF或者html，当然，你也可以选择直接复制然后一步黏贴到位。</p>
<figure data-type="image" tabindex="18"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914164738.gif" alt=""></figure>
<p><strong>在Microsoft word 中使用zotero插件</strong></p>
<p>通常在一开始安装软件的时候就会提示自动安装word插件，如果因为各种原因前期没有安装可以在设置的引用中进行安装，重启word即可。</p>
<figure data-type="image" tabindex="19"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163958.png" alt=""></figure>
<p>安装好之后，在word中就会出现如下zotero插件</p>
<figure data-type="image" tabindex="20"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163929.png" alt=""></figure>
<p>Zotero选项卡包含以下内容</p>
<figure data-type="image" tabindex="21"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163930.png" alt=""></figure>
<p>在正式插入引文之间，需要设置因为的格式和语言，通过管理样式可能找到海量的引文格式。如果需要显示中文，则可以在语言选项出选择中文。</p>
<figure data-type="image" tabindex="22"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163932.png" alt=""></figure>
<p>在需要添加引文的位置点击添加选项或者</p>
<figure data-type="image" tabindex="23"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163938.png" alt=""></figure>
<p>再出现的搜索框中可以使用各种方式来搜索自己需要插入的文献，例如作者姓名也是可以的。</p>
<figure data-type="image" tabindex="24"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163940.png" alt=""></figure>
<p>如果需要在一个位置内引用多篇文献，可以一次选择自己想添加的内容，最后会车即可。</p>
<figure data-type="image" tabindex="25"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163942.png" alt=""></figure>
<p>所有文献都引用文之后直接点击书目即可</p>
<figure data-type="image" tabindex="26"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163944.gif" alt=""></figure>
<p><strong>生成报告</strong></p>
<p>除了插入参考引文之外，zotero还给出了另一种导出参考文献的方式。也就是生成报告。</p>
<p>报告是简单的HTML页面，概述了所选项目的项目元数据，注释和附件。可以打印它们也将它们发布到网上并通过电子邮件发送。</p>
<p>创建报告可以右键单击中心窗格中的项目或选项，然后选择“从所选条目生成报告...”。还可以右键单击左列中的集合，然后选择“从集合生成报告”。</p>
<figure data-type="image" tabindex="27"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163946.png" alt=""></figure>
<p>第三方工具 https://github.com/retorquere/zotero-report-customizer/releases</p>
<p>可以帮助你更好的过滤报告内容，例如对报告进行排序或者增删条目等。</p>
<figure data-type="image" tabindex="28"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914163948.png" alt=""></figure>
<h3 id="备份和协作">备份和协作</h3>
<p><strong>同步</strong></p>
<p>zotero 本身支持300M免费的存储空间。这对很多人都是不够的，如果你不想购买官方的存储空间可以使用WebDAV服务。这里就不做展开介绍了，以国内使用比较方便的「坚果云」为例，官方给了一个比较详细的配置方法教程。</p>
<p><a href="http://help.jianguoyun.com/?p=3168">如何在Zotero中设置webdav连接到坚果云？</a></p>
<p><strong>协作</strong></p>
<p>协作功能可能是很多人都忽略掉或者不知道的一个功能。zotero 提供了相对完善的协作方式，这里做一些介绍。</p>
<p>如果你想和实验室或者几个好用共享协作一个文献库，那么就可以创建一个私有库，需要去官网创建，方式如下。</p>
<figure data-type="image" tabindex="29"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914164000.png" alt=""></figure>
<p>随后还有一些具体的权限需要设置，例如什么人可以读，什么人可以编辑。</p>
<figure data-type="image" tabindex="30"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914164008.png" alt=""></figure>
<p>创建好之后，如果你的客户端已经登陆并且完成同步，将会在侧边栏出现一个新的群组。如下图所示。</p>
<figure data-type="image" tabindex="31"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914164002.png" alt=""></figure>
<p>另外，在网页版的管理界面中可以进行成员邀请和协作。</p>
<figure data-type="image" tabindex="32"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914164004.png" alt=""></figure>
<h3 id="其它内容">其它内容</h3>
<p><strong>插件推荐</strong></p>
<p>插件系统是zotero作为开源软件的独特优势，官方插件网站 https://www.zotero.org/support/plugins 。</p>
<p>我在用的几款插件如下图所示，非常推荐你安装。</p>
<figure data-type="image" tabindex="33"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914165826.png" alt=""></figure>
<ul>
<li>
<p>当选择了一个项目时可以通过按住Mac OS X上的“Option”键，Windows上的“Control”键突出显示包含此项目的所有集合，也就是知道这篇文献所在的分组。</p>
</li>
<li>
<p>在集合列表或项目列表中的键盘上按“+”（加号）可以展开所有节点，按“ - ”（减号）可以折叠。</p>
</li>
<li>
<p>要查看所选库或集合中的项目数，请单击中间列中的项目，然后使用“全选”快捷方式（Mac OS X上的Command-A或Windows和Linux上的Control-A）。计数将显示在右列中。</p>
</li>
<li>
<p>快速复制时，在将项目拖放到文本文档时按住“Shift”键将插入引文而不是完整引用。</p>
</li>
<li>
<p>可以单击DOI和URL字段标签可以打开链接。</p>
</li>
</ul>
<hr>
<figure data-type="image" tabindex="34"><img src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png" alt=""></figure>
<p><strong>本文作者</strong>：思考问题的熊</p>
<p><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-nd/4.0">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议 (CC BY-NC-ND 4.0)</a> 进行许可。</p>
<figure data-type="image" tabindex="35"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190628083754.png" alt="扫码即刻沟通"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VScode入门学习路径]]></title>
        <id>https://kaopubear.top//post/2019-09-11-howtolearnvscode</id>
        <link href="https://kaopubear.top//post/2019-09-11-howtolearnvscode">
        </link>
        <updated>2019-09-11T10:14:31.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="相关内容简述">相关内容简述</h2>
<p>如果你对代码编辑器完全没有任何概念，那么可以把所谓的代码编辑器理解为一个更加适合写代码的地方。</p>
<p>在word里你可以方便的进行文字的编排，在PowerPoint中你可以方便的进行幻灯片的制作，而一个好用的代码编辑器则可以帮助你更加高效的编写代码脚本。</p>
<p>提到代码编辑器，可能了解生信技能树或者听过生信技能树课程的小伙伴第一反应都会是Notepad++，这款代码编辑器最早发布于2003年，并且一致更新至今非常经典。因为使用惯性和轻量的特点，这款代码编辑器依旧很受欢迎。</p>
<p>但是在2019年的今天，有更多好用的代码编辑器可以向你推荐。目前比较受大家欢迎且用户量较大的代码编辑器主要用三个，分别是VS code、Atom 和 Sublime text 。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="相关内容简述">相关内容简述</h2>
<p>如果你对代码编辑器完全没有任何概念，那么可以把所谓的代码编辑器理解为一个更加适合写代码的地方。</p>
<p>在word里你可以方便的进行文字的编排，在PowerPoint中你可以方便的进行幻灯片的制作，而一个好用的代码编辑器则可以帮助你更加高效的编写代码脚本。</p>
<p>提到代码编辑器，可能了解生信技能树或者听过生信技能树课程的小伙伴第一反应都会是Notepad++，这款代码编辑器最早发布于2003年，并且一致更新至今非常经典。因为使用惯性和轻量的特点，这款代码编辑器依旧很受欢迎。</p>
<p>但是在2019年的今天，有更多好用的代码编辑器可以向你推荐。目前比较受大家欢迎且用户量较大的代码编辑器主要用三个，分别是VS code、Atom 和 Sublime text 。</p>
<!--more-->
<p>另外，IDE 和 编辑器相比IDE 更为关注开箱即用的编程体验、对代码往往有很好的智能理解，同时侧重于工程项目，为代码调试、测试、工作流等都有图形化界面的支持，因此相对笨重，Java 程序员常用的 Eclipse 定位就是 IDE；而编辑器则相对更轻量，侧重于文件或者文件夹，语言和工作流的支持更丰富和自由。鉴于我们大部人的日常使用需求，这里的讨论主题围绕编辑器展开而非 IDE</p>
<p>VS code 官网地址：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p>
<p>Atom 官网地址：<a href="https://atom.io/">https://atom.io/</a></p>
<p>Sublime text 官网地址：<a href="https://www.sublimetext.com/">https://www.sublimetext.com/</a></p>
<p>Notepad++ 官网地址：<a href="https://notepad-plus-plus.org/">https://notepad-plus-plus.org/</a></p>
<h2 id="代表性工具介绍-vs-code">代表性工具介绍 VS code</h2>
<p>Visual Studio Code（简称 VS Code）是一个由微软开发，同时支持Windows 、 Linux和macOS等操作系统且开放源代码的代码编辑器，它支持测试，并内置了Git 版本控制功能，同时也具有开发环境功能，例如代码补全（类似于 IntelliSense）、代码片段和代码重构等，该编辑器支持用户个性化配置，例如改变主题颜色、键盘快捷方式等各种属性和参数，同时还在编辑器中内置了扩展程序管理的功能。(引自维基百科)</p>
<p>选择VS code的原因</p>
<ul>
<li>
<p>由微软核心团队开发，完全免费且开源</p>
</li>
<li>
<p>开发计划过程和反馈渠道透明，更新迭代稳定</p>
</li>
<li>
<p>跨平台编辑器，Windows macOS 和Linux 都可以使用</p>
</li>
<li>
<p>轻量，系统占用资源较少，大文件打开速度快</p>
</li>
<li>
<p>又丰富的官方和第三方插件库，可扩展性极强</p>
</li>
<li>
<p>在性能、语言支持、开源社区方面都做得不错，目前很受欢迎</p>
</li>
</ul>
<p>软件官方地址：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p>
<h2 id="学习路径">学习路径</h2>
<h3 id="vs-code-的基本介绍">VS code 的基本介绍</h3>
<p>2011 年底，微软从 IBM 请 《设计模式》的作者同时也是 Eclipse 掌舵人之一的 Erich Gamma 来开发一款优雅的在线开发工具（后来的 Manaco Editor），2015 年他把这款在线工具移植到了桌面平台，也就有了如今 VS Code 。师承 Eclipse 同时又吸取 Eclipse 的教训，他们决定核心只做一个高性能的轻量级编辑器，个性化功能交给插件系统来完成且要把插件系统运行在主进程之外。同时，VS Code 希望让开发者在编辑器里拥有 IDE 类似的开发体验，比如对源代码的智能理解、图形化调试工具和版本管理等等。总之，就是在 IDE 和编辑器中找到一个比较理想的平衡。</p>
<p>在很多人的印象中，微软一直是一个站在开源世界对立面，靠专利官司和垄断挣钱的公司，但其实微软近几年一直是 GitHub 贡献开源代码最活跃的公司，活跃到现在已经把 GitHub 收购了。而在所有微软的开源项目中，star 最高的 repo 就是 VS Code 编辑器。VS Code 以 MIT 协议开源，所有的开发过程和反馈渠道完全在 GitHub 开放，同时 VS Code 提供了统一的 Language Server Protocol 和 Code Debugging Protocol API，所有语言的开发和都能够通过实现两个 API 在 VS Code 上得到类似 IDE 的开发和调试体验。</p>
<p>如果你是一个 R 语言用户，RStudio 一定是首选 IDE，如果你是一个 Python 用户，Pycharm 则是大多数人的编辑器。但如果你平时既要用点 R，也要用点 Python，偶尔感觉这些 IDE 有点臃肿或者不想在两个 IDE 中反复切换，那么 VS Code 是一个不错的选择。</p>
<p>VS Code 有两个不同版本：稳定版（Stable）每月发布更新一次；预览版（Insiders）每个工作日更新一个版本。当然，你也可以同时安装两个版本互不影响。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914170912.png" alt=""></figure>
<h3 id="常用快捷键">常用快捷键</h3>
<p>无论我们提倡使用 markdown 还是使用快捷键，主要目的都是提高效率，尽量让双手不离开键盘。对于编辑器中快捷键的使用，一开始看似是一件更浪费时间的事情，但是随着肌肉记忆和熟练度增加，效率将会大大提高。本节内容主要涉及 VS Code 的常用快捷键以及如何定制。</p>
<p>如果你是从其他编辑器转到 VS Code，那你完全可以移植你之前熟悉的快捷键配置，比如 Vim, Atom 或者 sublime。如果你其它快捷键也不熟悉不如就专心学会 VS Code 的常用快捷键。</p>
<p>把自己日常经常用到的快捷键整理成了导图。如果能把下面图中的快捷键用熟练，每天省下 20-30% 使用编辑器的时间不是问题。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914170917.png" alt=""></figure>
<p>如果想要查看所有的快捷键，可以通过ctrl+K ctrl+s 进入快捷键设置界面。</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914170921.png" alt=""></figure>
<p>快捷键官方链接</p>
<p>详细设置信息</p>
<p>https://code.visualstudio.com/docs/getstarted/keybindings</p>
<p>windows 快捷键</p>
<p>https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf</p>
<p>macOS 快捷键</p>
<p>https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf</p>
<h3 id="编程语言支持">编程语言支持</h3>
<p>针对python等（对于程序猿群体）非常成熟大众的语言，基本没有任何设置的难度，只需要安装一个对应的插件就可以。</p>
<p>这里以如何支持 R 语言举例，进行介绍。基本操作步骤如下：</p>
<ol>
<li>安装R，建议使用默认路径即可。例如我实验室的电脑中是64位R软件的位置如下，这个位置一定要确认好。</li>
</ol>
<pre><code>C:\\Program Files\\R\\R-3.6.1\\bin\\x64\\R.exe
</code></pre>
<ol start="2">
<li>打开R，安装一个R包，命令如下</li>
</ol>
<pre><code class="language-r">install.packages(&quot;languageserver&quot;)
</code></pre>
<ol start="3">
<li>在VScode中安装两个和R相关的插件</li>
</ol>
<p><a href="https://marketplace.visualstudio.com/items?itemName=Ikuyadeu.r">R support for Visual Studio Code</a> 这个插件是 VS Code 中 R 的核心插件，具有语法高亮，基础代码片段和代码执行等功能。例如你可以在编辑器中选择某几行内容，然后使用ctrl + enter将代码发送到终端执行。</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=REditorSupport.r-lsp">R LSP Client</a> 有了这个它就可以进行代码补全、查看函数定义以及参数预览等功能。</p>
<p>安装方法是在插件管理界面输入插件名字，然后点击安装。</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914170924.png" alt=""></figure>
<ol start="4">
<li>在配置文件中进行两个对应配置</li>
</ol>
<p>通过ctrl+, 进入设置页面，在搜索页面首先搜索 rterm，如果你是Windows电脑就在windows 对应的Rterm位置处输入R的路径</p>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914170925.png" alt=""></figure>
<p>再在配置页面继续搜索 r.lsp 找到 rlsp path 对应设置处，在这里也输入R的安装路径</p>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914170928.png" alt=""></figure>
<ol start="5">
<li>打开一个包含 R 脚本的文件夹。注意，不是单独打开一个R脚本文件</li>
</ol>
<p>右键点击文件件，选择使用vscode打开，如下图</p>
<figure data-type="image" tabindex="7"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914170929.png" alt=""></figure>
<ol start="6">
<li>再打开 R 脚本即可，然后Windows点到按ctrl+enter , Mac 按 ⌘+Enter，激活环境，即可安心使用。效果如下图所示</li>
</ol>
<figure data-type="image" tabindex="8"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914170931.png" alt=""></figure>
<p>这时把鼠标放在任意一个函数上，就会出现如下类似的效果。</p>
<figure data-type="image" tabindex="9"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914170933.png" alt=""></figure>
<p>如果输入函数会自动补全</p>
<figure data-type="image" tabindex="10"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914170934.png" alt=""></figure>
<p>激活R 环境后，按住 ctrl+enter，就会依次运行光标所在行的代码。</p>
<pre><code class="language-R">install.packages(&quot;plotly&quot;)

data(&quot;EuStockMarkets&quot;)
xx &lt;- EuStockMarkets[, 1]
tmp &lt;- as.data.frame(EuStockMarkets)
tmp2 &lt;- head(tmp)
head(tmp2)

x.info &lt;- attr(xx, &quot;tsp&quot;)
tt &lt;- seq(from = x.info[1], to &lt;- x.info[2], by = 1 / x.info[3])
data.fmt &lt;- list(color = rgb(0.8, 0.8, 0.8, 0.8), width = 4)
line.fmt &lt;- list(dash = &quot;solid&quot;, width &lt;- 1.5, color = NULL)

ti &lt;- 1:length(xx)
m1 &lt;- lm(xx~ti)
m2 &lt;- lm(xx~ti + I(ti ^ 2))
m3 &lt;- lm(xx~ti + I(ti ^ 2) + I(ti ^ 3))

require(plotly)
p.glob &lt;- plot_ly(x = tt, y = xx, type = &quot;scatter&quot;, mode = &quot;lines&quot;,
    line = data.fmt, name = &quot;Data&quot;)
p.glob &lt;- add_lines(p.glob, x = tt, y = predict(m1), line = line.fmt,
    name = &quot;Linear&quot;)
p.glob &lt;- add_lines(p.glob, x = tt, y = predict(m2), line = line.fmt,
    name = &quot;Quadratic&quot;)
p.glob &lt;- add_lines(p.glob, x = tt, y = predict(m3), line = line.fmt,
    name = &quot;Cubic&quot;)
p.glob &lt;- layout(p.glob, title &lt;- &quot;Global smoothers&quot;)
print(p.glob)
</code></pre>
<h3 id="第三方插件介绍">第三方插件介绍</h3>
<p><strong>biosyntax</strong></p>
<p>更好的展示生物信息相关格式文本</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=reageyao.biosyntax">https://marketplace.visualstudio.com/items?itemName=reageyao.biosyntax</a></p>
<p><strong>Bracket Pair Colorizer</strong></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=reageyao.biosyntax">https://marketplace.visualstudio.com/items?itemName=reageyao.biosyntax</a></p>
<p>不同的括号显示不同的颜色</p>
<figure data-type="image" tabindex="11"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914170938.png" alt=""></figure>
<p><strong>Excel Viewer</strong></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=GrapeCity.gc-excelviewer">https://marketplace.visualstudio.com/items?itemName=GrapeCity.gc-excelviewer</a></p>
<p>VScode中直接查看csv数据</p>
<figure data-type="image" tabindex="12"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914171707.gif" alt=""></figure>
<p><strong>LaTeX Workshop</strong></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=James-Yu.latex-workshop">https://marketplace.visualstudio.com/items?itemName=James-Yu.latex-workshop</a></p>
<p>latex 语法支持（包括pdf预览）</p>
<p><strong>Markdown All in One</strong></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one">https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one</a></p>
<p>VScode Markdown 插件，支持各种快捷键快速输入，支持数学公式，自动补全。带来类似于 typora 的使用体验。</p>
<p><strong>Markdown Preview Enhanced</strong></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced">https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced</a></p>
<p>目前最好用的 markdown 预览插件</p>
<figure data-type="image" tabindex="13"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914170942.png" alt=""></figure>
<p><strong>Pangu-Markdown</strong></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=xlthu.Pangu-Markdown">https://marketplace.visualstudio.com/items?itemName=xlthu.Pangu-Markdown</a></p>
<p>中文和数字中文和字母之间自动加入空格</p>
<p><strong>Project Manager</strong></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager">https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager</a></p>
<p>必备的项目管理目录插件</p>
<p><strong>Settings Sync</strong></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync">https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync</a></p>
<p>通过gist同步你的vscode配置</p>
<p>还有其他一些比较大众的，就不多余列出了，只需要随便在搜索引擎里搜索 vscode 插件即可。</p>
<h3 id="常用的几个小配置和技巧">常用的几个小配置和技巧</h3>
<p>其实能够熟练的记忆并使用十几个常用快捷键，然后可以配置好常用的编程语言支持环境，并且善于发现好用的快捷键，基本就已经可以上手日常使用 VS code 了。对于一个新手来说已经足够了。</p>
<p>这一部分内容介绍几个我日常会用到的小配置和技巧，（这里和后面几天的内容）供大家进阶了解。</p>
<p><strong>编辑器将所有的空格符、制表符等全部渲染</strong></p>
<p>通过设置 editor.renderWhitespace: all 让编辑器将所有的空格符、制表符等全部都渲染出来。这样你就能够一眼看出这个文件中使用的究竟是制表符还是空格符，以及有没有在哪里不小心多打了一个空格等。</p>
<p><strong>文件快速跳转</strong></p>
<p>如果同时打开了十几个文件，如何在不同的文件之间快速跳转呢？</p>
<p>在 VS Code 中，解决这个问题的第一个方法，就是按下 “Ctrl+Tab”，然后继续按着 “Ctrl”键但是松开 “Tab” 键，这样你就可以打开一个文件列表，这个列表罗列了当前打开的所有文件。接下来，你可以通过按下 “Tab”键在这个列表里跳转，选择你想要打开的文件。最后选到你想打开的文件后，松开 “Ctrl” 键，这个文件就被打开了。</p>
<p>除此之外，VS Code 在命令面板里提供了一种支持搜索的文件跳转方式。当你按下 “Cmd + P” （Windows 上是 Ctrl + P）时，就会跳出一个最近打开文件的列表，同时在列表的顶部还有一个搜索框。</p>
<p><strong>markdown 内符号跳转</strong></p>
<p>符号跳转本身是针对代码文件而言的，可以快速的跳转到一些函数定义和类定义。但是这个功能在markdown中也十分好用，可以起到快速定位段落的作用。快捷键是“Cmd + Shift + O” （Windows 上是 Ctrl + Shift + O）你可以通过符号，快速地在不同的章节直接进行跳转。</p>
<figure data-type="image" tabindex="14"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914170945.png" alt=""></figure>
<p><strong>指定默认新建文件格式</strong></p>
<p>当你按下 Cmd + N （Windows 上是 Ctrl + N）在编辑器里创建一个新文件的时候，这个新的文件会被识别为普通文本文件，你在里面书写内容时并没有合适的语法高亮和自动补全，所以你可能会经常看到有些用户，创建了新的空文件后，然后再去调整文件的语言类型。</p>
<p>但是，如果通过把 “files.defaultLanguage” 设置为你想要的语言，比如说，把它设置成 “Markdown”，那么创建空文件的时候，VS Code 就会把它当作一个 Markdown 文件，然后你在里面能够得到 Markdown 的所有语言支持。</p>
<p><strong>在前后两次光标处跳转</strong></p>
<p>可以使用 “Ctrl + -” （Windows 上是 Alt + Left）跳转回上一次光标所在的位置。而如果你按下 “Ctrl + Shift + -” （Windows 上是 Alt + Right）则可以跳到下一次光标所在的位置。有了这两个快捷键，我们就能够在阅读代码时快速来回跳转。</p>
<p><strong>多光标特性</strong></p>
<p>多光标特性是vscode 高效使用作重要的功能之一，这里不在展开介绍，建议大家学习官方文档。这里提示两个关于多光标的特殊命令：“Cmd + D”（Windows 上是 Ctrl + D）和 “Option + Shift + i” （Windows 上是 Alt + Shift + i）</p>
<p><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_multi-cursor-selection">https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_multi-cursor-selection</a></p>
<h3 id="利用好-vscode-终端">利用好 VScode 终端</h3>
<p>VS Code 的设计理念之一是如何让 VS Code 和终端能够更紧密联系在一起。例如，我们可以在终端中以命令行的形式打开 VS Code，我们也可以在资源管理器中通过右键直接打开在终端中打开一个目录。甚至 VS code 直接终端做进了 VS Code 的工作台，这样用户就不需要在编辑器和系统终端之间来回切换。</p>
<p>由于把终端做到了工作台当中，所以我们能够更好地把终端的输入输出和我们经常熟悉的快捷键，以及资源管理器、版本管理、代码跳转等各个部件有机地组合到一起。这种效率上的提升是指数级的，因为它给 VS Code 的各个组件都增添了新的玩法。</p>
<h3 id="自定义快捷键进阶内容">自定义快捷键（进阶内容）</h3>
<p>如果你是一个老实的 R 语言用户，那么一定不会用 = 代替 &lt;-，但是 &lt;- 需要按两下键盘而且这两个键位置还挺远，更难过的是因为你用了语法提示如果你在&lt;- 两端没有加上空格它还会给你出现「大破浪」下划线恶心你。在 RStudio 中你可以使用 alt + - 一气呵成输入这四个符号&lt;-，在 VS Code 中必须也可以。</p>
<p>打开 Keyboard Shortcuts （快捷键是 ctrl+k ctrl+s)，在搜索框中搜索alt+s，这个时候你会看到这个快捷键已经被绑定了（别慌），点开 json 文件我们去给这个快捷键设置不同情境下新的含义。</p>
<figure data-type="image" tabindex="15"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914170947.png" alt=""></figure>
<p>点开快捷键配置文件之后不要管左边的内容，直接去右边设置就好，配置方法如图。从此以后在 R 或者 Rmd 文件里 alt+-就变成了和 RStudio 一样的快捷键。</p>
<figure data-type="image" tabindex="16"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190914170949.png" alt=""></figure>
<p>关于VS code的快捷键文本编辑器这里做一些补充介绍，如下是常见的一个json格式快捷键代码片段</p>
<pre><code class="language-json">{
  &quot;key&quot;: &quot;cmd+enter&quot;,
  &quot;command&quot;: &quot;command&quot;,
  &quot;when&quot;: &quot;editorTextFocus&quot;
}
</code></pre>
<p><strong>Key</strong></p>
<p>在这个 JSON 对象里第一个键是 key，也就是你将要使用的快捷键。如果你是使用“定义按键绑定”按钮来生成的，那么 VS Code 会根据你的键盘布局来自动生成这个文本。 VS Code 为了适应各种不同的键盘布局，在 key 这个值上还是有很多特殊要求的。</p>
<p><strong>Command</strong></p>
<p>”command” 这个属性的意思是想要为哪个命令指定特殊的快捷键。</p>
<p><strong>When</strong></p>
<p>“when” 这个属性的值说的是在什么情况下这个快捷键绑定能够生效。此时 “when” 的值已经有一个占位符 （placeholder）了，叫做“editorTextFocus”，它代表着光标聚焦在代码编辑器的文本上。</p>
<p>如果光标在编辑器的文本上时，那么 “editorTextFocus” 就是 true，那么这个“when”的条件就生效了，这则快捷键绑定就会生效。而假如光标处在集成终端里，此时 “editorTextFocus”就是 false ， “when” 就不生效，同样也就不会绑定这个快捷键了。</p>
<p>在 “when” 条件里，除了 editorTextFocus 外，我们还有非常多的值可以使用，并且加以组合。比如集成终端对应的是 terminalFocus，资源管理器对应的是 filesExplorerFocus 。除此之外，你也可以<a href="https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts">利用 VS Code 的文档去查询全部可以使用的值</a>。在我们截图的设置中设置了在哪种语言环境下激活快捷键。</p>
<p>而在书写 “when” 条件时，VS Code 还支持几个基础的操作符。这样我们就能够书写相对复杂的条件语句了。</p>
<ul>
<li>
<p><code>!</code> 取反。比如我们希望当光标不在编辑器里时，绑定一个快捷键，那么我们可以使用 !editorFocus，使用 ！进行取反。</p>
</li>
<li>
<p><code>==</code> 等于。when 条件值除了是 boolean 以外，也可以是字符串。比如 resourceExtname 对应的是打开的文件的后缀名，如果我们想给 js 文件绑定一个快捷键，我们可以用 “resourceExtname == .js”。</p>
</li>
<li>
<p>&amp;&amp; And 操作符。我们可以将多个条件值组合使用，比如我希望当光标在编辑器里且编辑器里正在编辑的是 js 文件，那么我可以用 “editorFocus &amp;&amp; resourceExtname == .js”。</p>
</li>
<li>
<p><code>=~</code> 正则表达式。还是使用上面的例子，如果我要检测文件后缀是不是 js，我也可以写成 “resourceExtname =~ /js/”，通过正则表达式来进行判断</p>
</li>
</ul>
<p>可以参考官方说明 <a href="https://code.visualstudio.com/docs/getstarted/keybindings#_keyboard-rules">https://code.visualstudio.com/docs/getstarted/keybindings#_keyboard-rules</a></p>
<hr>
<figure data-type="image" tabindex="17"><img src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png" alt=""></figure>
<p><strong>本文作者</strong>：思考问题的熊</p>
<p><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-nd/4.0">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议 (CC BY-NC-ND 4.0)</a> 进行许可。</p>
<figure data-type="image" tabindex="18"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190628083754.png" alt="扫码即刻沟通"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[当我谈工具的时候我在谈什么]]></title>
        <id>https://kaopubear.top//post/2019-09-10-howtolearntools</id>
        <link href="https://kaopubear.top//post/2019-09-10-howtolearntools">
        </link>
        <updated>2019-09-10T10:08:00.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="好工具那么多你知道如何学吗">好工具那么多，你知道如何学吗</h1>
<p>比知道一个工具更重要的是想明白如何学习一个工具。**比如为了以 VS code 为例进行说明，我甚至在今天上午直接写了一个 VS code 插件。**是的，写了一个插件，不是用了一个插件。</p>
<h2 id="工具重不重要">工具重不重要</h2>
<p>但凡说起工具，首先避不开的问题是「工具重不重要」。</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="好工具那么多你知道如何学吗">好工具那么多，你知道如何学吗</h1>
<p>比知道一个工具更重要的是想明白如何学习一个工具。**比如为了以 VS code 为例进行说明，我甚至在今天上午直接写了一个 VS code 插件。**是的，写了一个插件，不是用了一个插件。</p>
<h2 id="工具重不重要">工具重不重要</h2>
<p>但凡说起工具，首先避不开的问题是「工具重不重要」。</p>
<!--more-->
<p>有人认为工具不重要，工具知道再多用的再好也是唯工具论。如果本身既没有 Power 也没有 Point，就算把 PowerPoint 做上天也没用。这话当然是有道理的，就像如果你飙的一手好车但不知道往哪开，反而容易出事。不过，不负责任的指责永远是容易的事情。如果这样的观点来自既不 Power 也没 Point 还不会 PowerPoint 的人，呵呵。</p>
<p>与此相对，另外一部分人认为工具非常重要，而且他们特别投入于各种工具的研究和琢磨。折腾工具有时候会给人带来成就感，往往也容易深陷其中无法自拔。不少人对工具有一种执念，总是希望找到最合适的工具后再开始工作。不过，时间久了，这种成就感通常会伴随着一些失落。</p>
<p>如果让我发表一下自己的观点，我认为工具可以说不重要。但是，这句话是对懂工具的人说的，最起码是针对有工具思维的人而言。对这些人来说，重要的不是工具而是如何用好自己熟悉的工具以及面对不同的场景和问题如何快速找到并切换到合适的工具。工具对于懂工具的人来说不重要，就像马云一直认为钱不是问题。如果自己本身不具备工具思维就跟着起哄工具无用，无形中怕是自己就变成了别人的工具。</p>
<h2 id="如何学习一个工具">如何学习一个工具</h2>
<p>小时候，老师总会说要把书从薄读到厚再从厚读到薄。这话听起来朴实无华，但确是工具学习时最应该贯彻的方针。</p>
<p>一个工具小白，慢慢知道很多工具，通过学习和试错找到适合自己的几个，然后把适合自己的工具学精学透，逐渐培养自己的工具思维。</p>
<h3 id="明确方向和需求">明确方向和需求</h3>
<p>解决一个问题首先要明确问题是什么，学习一个工具最基本的前提是知道自己要做什么。</p>
<p>在日常生活中，你可能有机会听到看到各种名字的工具，也会看到不同的人对于同一个工具截然不同的评价，这个时候你应该如何判断。</p>
<p>大家谈及一个工具时往往会从自身角度出发。听到 XXX 工具特别好或者不好，要学会首先判断对方的出发点，如果使用场景和角度完全不是你关心的方向，那就没必要受到别人的干扰。</p>
<p>因此，学习一个工具首先要明确自己的方向和需求。<strong>很多时候我们需要的不是一个电钻，而只是想要墙上的一个洞。</strong></p>
<h3 id="了解工具上下限">了解工具上下限</h3>
<p>明确需求之后，最先了解的应该是一个工具的上限和下限，也就是工具擅长什么，不能做什么。开始学习之前，一定要把工具的上限和下限搞清楚，不然浪费自己的时间还要抱怨工具和推荐这个工具的人。</p>
<p>以我目前在用的<strong>印象笔记</strong>举例，其实它本身有着明确的优点和缺点。如果你记录笔记的需求是要一个很好用的编辑器，那印象笔记目前的编辑器中规中矩甚至有点简陋。而我之所以用了它 6 年，是因为它和第三方应用的结合能力，剪藏能力以及极强大的搜索能力。<strong>有些缺点和毛病，能忍就忍了。</strong></p>
<h3 id="谨慎改变在用的工具">谨慎改变在用的工具</h3>
<p>每个人或多或少的都正在使用一些工具，在这个过程中我们还会陆续看到非常多看起来「碉堡了」的东西。要不要换就是一个必须面对的问题。我的建议是慎之又慎，当我们清楚的明确需求和工具上下限之后再慎重做出选择。</p>
<p>假设你正在使用的 A 工具有 ABC 三个功能日常重度使用，即便你了解到新工具B在C功能上比A强大了几个数量级也要考虑好AB功能在B工具是不是够用。<strong>尽最大的努力学好手头的工具是一个最划算的选择；反之如果这个工具的上限已经阻碍了你，那就没什么值得留恋，果断换。</strong></p>
<h3 id="用它然后改变它">用它然后改变它</h3>
<p>学习一个工具，在我的观念里一直都不仅仅是为了用一用。<strong>如果你真的喜欢一个东西就应该尝试着去接近它甚至改变它</strong>，当然，这是如何学习一个工具的最高需求了。而且这样的操作不需要多，有那么一两个工具足矣。在这个过程中，如果从一个围观群众走到行进队伍中去，我们对一个工具的认知就会有一个质的飞越。</p>
<p>比如，从印象笔记用户走到全国只有30个人的资深印象大使，让我明白了一个产品的设计理念哲学和开发规划，甚至看到了更多它背后存在的问题。这样的经历，让我对一个产品的来龙去脉有了更加深入的理解和体会。</p>
<p>在一开始使用 VS code 的时候，我就被它丰富的插件所吸引，例如直接在编辑器中操作 CSV 文件，在编辑器中快速分享美观的代码截图。本着用它然后改变它的初衷，我把学习目标定在了写一个自己的插件。于是，借着「生产力工具交流群」这个机会，我就顺手写了一个 VS  code 插件。</p>
<h2 id="我的-vs-code-插件">我的 VS code 插件</h2>
<p>有人说，写插件，这么高端吗？</p>
<p>其实这个事一点都不高端，因为 VS code 的插件体系有非常多种类，其中最复杂的是通过编程来提供插件功能，可以选择 TypeScript 或者 JavaScript；还有一类是提供语法高亮以及定义等的语言支持。以上两类相对高端，可能需要你有一些 nodejs 和 js 基础知识，但是同时还有大量的主题插件、代码片段分享插件以及快捷键分享插件。这些插件都非常容易上手，可能只需要两三个小时就可以学会从写插件到生成插件再到发布插件的全过程，这个话题可以后面再细聊。</p>
<p>VS code 目前是我的主力代码编辑器，在大多数时候也是我的常用文本编辑器。为了在用 VS code 写文献阅读笔记和读书笔记时更加顺手，我根据自己的阅读和记录习惯整理了一些 markdwon 模板，所谓模板其实就是若干适用于 markdown 的 snippets。为了让有需要的朋友也能用上这些 snippets，我就把它们打包成了一个插件，方便安装与使用。这个插件就属于一个代码分享类的插件，目前这个插件还处于非常简陋的程度，简陋到只引入了两个 snippets，还没有添加插件的 icon，但后期会一直升级迭代，调用更多的API去实现一些丰富的功能。写它的主要目的是就为了熟悉 VS code 插件的开发及发布流程。</p>
<p>这个插件目前已经发布在了官方的插件商店。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190906142643.png" alt=""></figure>
<p>如果<strong>想要验证这是一个多么简陋的插件</strong>，你可以直接在 VS code 编辑器的插件页面内进行搜索。注意，如果直接搜索插件的名字可能不好找，但是搜索开发者<code>feizhao</code>反而一下就出来了。点击安装之后，在 markdown 文本中即可使用。为了展示一下效果，录制了一个几秒钟的动图作为演示。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190906142928.gif" alt=""></figure>
<hr>
<figure data-type="image" tabindex="3"><img src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png" alt=""></figure>
<p><strong>本文作者</strong>：思考问题的熊</p>
<p><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-nd/4.0">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议 (CC BY-NC-ND 4.0)</a> 进行许可。</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190628083754.png" alt="扫码即刻沟通"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何使用语雀快速发表自己的博客]]></title>
        <id>https://kaopubear.top//post/2019-09-01-howtouseyuque</id>
        <link href="https://kaopubear.top//post/2019-09-01-howtouseyuque">
        </link>
        <updated>2019-09-01T07:41:32.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>生信圈子很多人在用的「简书」最近一段时间凉凉了。朋友圈一片哀嚎，大家纷纷表示恐慌，不知道该去哪里安放自己的创作欲望。</p>
<p>动手能力强的朋友计划动手搭建自己的博客，类似于已经更新了快三年的「<a href="https://kaopubear.top/">思考问题的熊</a>」以及最近势头很生猛的「<a href="http://xuzhougeng.top/">洲更</a>」。</p>
<p>还有一些人暂时没有自己搭建博客的计划，只是希望能找到一个适合写作和分享的地方，在这里推荐一下「语雀」。如果你想要一个可以<strong>有二级域名</strong>，<strong>支持 markdown，自带图床，可以私藏可以公开分享，可以点赞评论同时还不要钱</strong>的写作平台，语雀可能是最好的选择。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>生信圈子很多人在用的「简书」最近一段时间凉凉了。朋友圈一片哀嚎，大家纷纷表示恐慌，不知道该去哪里安放自己的创作欲望。</p>
<p>动手能力强的朋友计划动手搭建自己的博客，类似于已经更新了快三年的「<a href="https://kaopubear.top/">思考问题的熊</a>」以及最近势头很生猛的「<a href="http://xuzhougeng.top/">洲更</a>」。</p>
<p>还有一些人暂时没有自己搭建博客的计划，只是希望能找到一个适合写作和分享的地方，在这里推荐一下「语雀」。如果你想要一个可以<strong>有二级域名</strong>，<strong>支持 markdown，自带图床，可以私藏可以公开分享，可以点赞评论同时还不要钱</strong>的写作平台，语雀可能是最好的选择。</p>
<!--more-->
<h2 id="语雀是什么">语雀是什么</h2>
<p>关于写东西的工具，你可能知道类似于印象笔记或者有道云之类的各种笔记，可能也知道类似于腾讯文档这样的在线平台。但是可能还没听说过「语雀」。</p>
<p>关于语雀是什么，在这里仅仅摘抄一点<a href="https://www.yuque.com/yuque/help/about">官方的介绍</a>。更加相信的可以直接阅读原文。</p>
<blockquote>
<p><strong>「语雀」是一个「专业的云端知识库」</strong>，孵化自 <a href="https://www.antfin.com/">蚂蚁金服</a> ，是 <a href="https://www.yuque.com/yubo/explore/tcaywl">体验科技</a> 理念下的一款创新产品，已是10万阿里员工进行文档编写、知识沉淀的标配。</p>
<p>语雀诞生伊始，只是希望能给工程师提供一个好用的工具用来写技术文档，达成「用Markdown写文档」这个小目标。但在产品研发的过程中，我们发现其实身边的每个人、每个团队、每个组织都有很多知识，但一直以来缺少一个好用的工具让这些知识不只是留在每个人的大脑或电脑里，还可以被记录、分享和交流。</p>
</blockquote>
<p>类似于「腾讯文档」，「语雀」也是背靠巨头起家，来自于阿里巴巴的蚂蚁金服团队，目前已经从公司内部推向了所有人。和笔记以及在线文档的定位不同，「语雀」的主打定位是「知识库」和「团队」。</p>
<p>「语雀」的个人主页称之为「工作台」，如下图所示，基本可以看到他支持的全部功能。你写的文章可以以单一的「文档」形式存在，也可以隶属于你的一个「知识库」，同时也可以隶属于一个「团队」。</p>
<p>另外，「协作」和「讨论」可以让你和其他用户建立沟通，而「收藏」则是可以让你跟进别人优秀的公开「知识库」或者「文章」，「关注」则是让你可以关注那些有些的文档分享者。</p>
<p>如果类比成熟悉的概念，这里的收藏关注其实都和简书没有什么差别。但是协作则是简书这种平台所欠缺的。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190829153922.png" alt=""></figure>
<h2 id="何为知识库">何为知识库</h2>
<p>所谓的知识库，其实就是可以存放整理各类型知识的一个集合。在语雀中提供了如下几种类型的知识库。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190901164425.png" alt=""></figure>
<h3 id="文档">文档</h3>
<p>文档是最基本的一种知识库形式。</p>
<p>其本质可以理解为一本书。这本书可以分章，分节，有完善的目录功能支持。他可以是一个产品手册，可以是一个技术文档，也可以是一个专栏，甚至真的可以是是一本书，比如我曾经写过的《<a href="https://www.yuque.com/kaopubear/kaoyan">靠谱学长说：聊聊考研复习这件事</a>》</p>
<h3 id="专栏">专栏</h3>
<p>所谓专栏，其实就是下文将要介绍的博客。你可以把它理解为「文章的合集」。</p>
<p>和常见的博客概念不同，这个「专栏」可以隶属于一个个人或者一个团队，每篇文章都可以是不同的作者。</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190901164429.png" alt=""></figure>
<p>至于画板和表格类型的数据库，和这篇文章的主题关联不大，暂时就先不介绍了。</p>
<h2 id="如何把语雀变成博客">如何把语雀变成博客</h2>
<p>所以博客，无非就是同时满足如下几个需求：</p>
<ul>
<li>有一个独立的网址，最好是能加入个性化域名</li>
<li>在里面可以写各种各样类型的文章并进行公开发表</li>
<li>有评论功能可以和读者进行沟通</li>
</ul>
<p>如果还有更高阶的需求，那可能就是如下几点：</p>
<ul>
<li>有自己的图床，方便上传</li>
<li>有很好的编辑体验</li>
<li>支持多种内容的上传以及展示，例如视频和数学公式</li>
<li>有完整的使用说明，开发者能够持续维护和更新</li>
</ul>
<p>以上这些「语雀」都可以满足，甚至很多地方可以带来意想不到的惊喜。</p>
<h3 id="独立二级域名">独立二级域名</h3>
<p>语雀允许你对自己的主页和每个知识库设置有辨识度域名，而不是像简书那样给你一串冰冷冷的随机字符。</p>
<p>在账户管理页面，你可以设置个人路径。</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190901164434.png" alt=""></figure>
<p>针对一个知识库，你可以设置独立的下一级名称。</p>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190901164438.png" alt=""></figure>
<h3 id="特别优秀的编辑器">特别优秀的编辑器</h3>
<p>语雀的文档编辑器是一个现代编辑器该有的样子。支持标题、字体、表格、列表、上传图片、表格、代码片段等常用功能，<a href="https://www.yuque.com/yuque/help/dive-into-yuque-editor#nte1yh">支持 Markdown 常用快捷指令</a>。**所见即所得，让你写得顺手。**特别详细的介绍你可以查看<a href="https://www.yuque.com/yuque/help/dive-into-yuque-editor">官方说明</a>，这里我只是写几个让我感动的地方。</p>
<p>首先，可以展示和上传你能想到的所有东西。包括但不限于<strong>数学公式，思维导图，流程图，各种本地文件。甚至你还可以直接插入本地视频或者B站的视频。</strong></p>
<p>而且插入方式特别人性化 <code>ctrl+/</code> 直接调取插入选项。</p>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190901164443.png" alt=""></figure>
<p>然后是编辑器支持多种种插入图片的方式，总有一种满足你的编写习惯。例如：</p>
<ul>
<li>直接系统层级的复制粘贴</li>
<li>直接从桌面拖拽到页面</li>
<li>从顶部 toolbar 插入</li>
</ul>
<p>上传好的图片可以任意调节大小，甚至支持插入跳转链接。别人只需要点击一下图片，就可以调转到你指定的地方。</p>
<figure data-type="image" tabindex="7"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190901164447.png" alt=""></figure>
<p>关于很多人关心的markdown功能。语雀支持绝大部分的 markdown 快捷输入方式，通过这些快捷输入方式，我们可以不用鼠标完成文档的编辑。</p>
<figure data-type="image" tabindex="8"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190901164452.gif" alt=""></figure>
<p><strong>如果只有一个词概括编辑体验那就是：顺滑</strong></p>
<h3 id="公开发表分享">公开发表分享</h3>
<p>如果你把一个「文档」或者一个「专栏」，本身设置为<strong>互联网可见。</strong> 那么里面更新的内容本身就是公开的，所有人只要知道连接或者域名，就可以去访问。</p>
<figure data-type="image" tabindex="9"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190901164505.png" alt=""></figure>
<p>另外，你还可以设置知识库里的内容是否可以被搜索引擎收录。如果是博客的话，打开这个选项，可以帮助别人更加方便的搜索到你的文章。</p>
<figure data-type="image" tabindex="10"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190901164509.png" alt=""></figure>
<p>对于一些私密的文章，你甚至可以设置密码，只让一部分人看到。</p>
<h3 id="优化阅读体验">优化阅读体验</h3>
<p>针对专栏的单篇文章，在发布时可以进行多种设置。如下图所示，出了封面和摘要之外，还可以修改成和文章相关的路径。同时，也可以对单篇内容进行权限设置。</p>
<figure data-type="image" tabindex="11"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190901164513.png" alt=""></figure>
<h3 id="协作和评论">协作和评论</h3>
<p>「语雀」差别与大多数纯博客平台的一点，就是类似于「腾讯文档」和「石墨」的协作功能。除了通过分享链接完成知识库分享，也可以通过添加协作人员完成知识的协作。被添加的人员可以分为可编辑、只读权限。</p>
<p>在每一篇文章的下面，都可以进行评论，你也可以对具体的评论进行回复。</p>
<figure data-type="image" tabindex="12"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190901164519.png" alt=""></figure>
<h3 id="完善的官方支持">完善的官方支持</h3>
<p>背靠大厂，以及官方的重视。语雀目前有非常完善的<a href="https://www.yuque.com/yuque/help">官方文档</a>。日常碰到的问题，通过留言等形式，也会很快得到回复。</p>
<p>另外，看下图可以感受一下开发迭代的速度。</p>
<figure data-type="image" tabindex="13"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190901164525.png" alt=""></figure>
<h2 id="其它几个特点">其它几个特点</h2>
<h3 id="如何搜索">如何搜索</h3>
<p>还在苦恼简书那种尴尬的搜索方式吗？</p>
<p>语雀的搜索功能也非常人性化，支持多种粒度的搜索。当你在任意界面的搜索框输入内容时，它会提醒你搜索范围。比如你可以搜索当前知识库，或者搜索当前团队，甚至是只搜索和你相关的内容。</p>
<figure data-type="image" tabindex="14"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190901164529.png" alt=""></figure>
<h3 id="快速的多格式导入">快速的多格式导入</h3>
<p>在一个文档的编辑页面，复制 Markdown 格式文本。在阅读页面，右上角「更多」里面可以找到「查看 Markdown」。</p>
<p>不管你之前写文档是用 Word、Markdown、Pages、WPS 还是 Confluence、GitBook……都可以顺滑地迁移到语雀文档！其中 Markdown 可以直接支持标准的latex公式。我的《<a href="https://www.yuque.com/kaopubear/kaoyan">靠谱学长说：聊聊考研复习这件事</a>》就是通过gitbook 实现整本书导入的。</p>
<figure data-type="image" tabindex="15"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190901164533.png" alt=""></figure>
<h3 id="团队功能">团队功能</h3>
<p>在语雀的官方介绍中，团队可以是一帮人、一件事情、或者一个项目。甚至也可以和你实际组织结构进行挂钩，如某个部门、某个公益组织，比如这是语雀官方团队：<a href="https://yuque.com/yuque">https://yuque.com/yuque</a>。在一个团队中，可以有清晰的职责和权限，大家协作分工的效率不必一些专业的工具逊色。</p>
<h2 id="现阶段问题">现阶段问题</h2>
<p>如果你不想仅仅把语雀当做一个博客，那么完全使用语雀你还需要注意目前存在的几个主要问题。</p>
<ol>
<li>移动端目前只有微信小程序，功能比较简单</li>
<li>桌面端主要是网页版</li>
<li>默认阅读模式，使用编辑按钮才会进入编辑状态</li>
</ol>
<p>好了，就安利到这里，祝使用愉快</p>
<hr>
<figure data-type="image" tabindex="16"><img src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png" alt=""></figure>
<p><strong>本文作者</strong>：思考问题的熊</p>
<p><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-nd/4.0">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议 (CC BY-NC-ND 4.0)</a> 进行许可。</p>
<figure data-type="image" tabindex="17"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190628083754.png" alt="扫码即刻沟通"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[biotools 综合性生物信息工具资源网站]]></title>
        <id>https://kaopubear.top//post/2019-08-15-biotools-web</id>
        <link href="https://kaopubear.top//post/2019-08-15-biotools-web">
        </link>
        <updated>2019-08-15T07:48:30.000Z</updated>
        <summary type="html"><![CDATA[<p>生物信息涉及到的工具方法过于庞杂，很多时候接触到一个新的内容总是不知该去哪里找相关的工具，还有很多时候找到的工具太多又不知道该用哪个。之前写过两篇文章 <a href="https://kaopubear.top/2018-09-27-sequence66/">66 种测序数据分析方法和流程</a> 和 <a href="https://kaopubear.top/2019-05-24-searchbiocinr/">如何快速找到自己需要的 R 包</a>。分别从测序数据类型和 bioconductor 包两个角度介绍如何快速找到自己需要的工具。</p>
<p>今天是这个系列的最后一篇文章，介绍一个综合性生物信息工具资源网站 <strong>biotools</strong>。以后只要用好这三个工具，就不会害怕生物信息不知道用什么和怎么选工具的问题。</p>
]]></summary>
        <content type="html"><![CDATA[<p>生物信息涉及到的工具方法过于庞杂，很多时候接触到一个新的内容总是不知该去哪里找相关的工具，还有很多时候找到的工具太多又不知道该用哪个。之前写过两篇文章 <a href="https://kaopubear.top/2018-09-27-sequence66/">66 种测序数据分析方法和流程</a> 和 <a href="https://kaopubear.top/2019-05-24-searchbiocinr/">如何快速找到自己需要的 R 包</a>。分别从测序数据类型和 bioconductor 包两个角度介绍如何快速找到自己需要的工具。</p>
<p>今天是这个系列的最后一篇文章，介绍一个综合性生物信息工具资源网站 <strong>biotools</strong>。以后只要用好这三个工具，就不会害怕生物信息不知道用什么和怎么选工具的问题。</p>
<!--more-->
<p>其实说到这类整合网站，很多人都知道 omictools, 不过它很早之前就已更名为 omicX 并转向商用，每天点上六七次网页之后就会提示付费且价格不菲。现在，有一个同样好用还免费的网站来替代它——biotools。</p>
<p>Genome Biology 近日上线的一篇题为 The bio.tools registry of software tools and data resources for the life sciences 的文章，介绍的就是这个网站。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190813234522.png" alt=""></figure>
<h2 id="网站特点">网站特点</h2>
<p>biotools 背后团队来源于欧洲的一个政府间组织 the European Infrastructure for Biological Information(ELXIR)， 这个组织主要的工作就是希望能够协调整合以及维护所有组织成员国内的生物信息学数据和各种资源，而这个网站主要是有丹麦提供资金和领导。因为是非盈利组织，所以无需付费使用。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190815154257.png" alt=""></figure>
<p>从网站的介绍来看，主要有如下几个主要特点：</p>
<ul>
<li>所有的数据公开：可以用这写数据集进行符合开源协议的二次开发</li>
<li>所有网站的源代码开源：可以去 GitHub 上提交 issue 并了解最新动态</li>
<li>所有人都可参与：注册后可以按照规定格式自行提交尚未收录的工具</li>
<li>工具唯一标识：所有资源分配有唯一 ID，方便和其他工具整合以及交叉使用</li>
<li>资源描述有严格标准：涉及到的主题操作数据以及格式等描述都有明确的标准</li>
<li>有 Web API：可以使用官方提供的 API 进行各方便的访问和查询</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190813224704.png" alt=""></figure>
<h2 id="简单使用">简单使用</h2>
<p>biotools 的使用非常简单。网站首页提供了一些比较受欢迎的词条目录，方便直接访问。以 Nucleic acids 为例，目录如下 。包括和「核酸」相关的序列比对、甲基化分析、变异检测以及转录因子结合预测等。</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190815154303.png" alt=""></figure>
<p>每一个词条都可以点击，点击后就会进入对应的搜索界面。如下图所示。</p>
<p>首先，可以在右上角选择展示方式，个人比较推荐「详细」模式，看到关于搜索结果更详细的描述信息。</p>
<p>在这个搜索页面中可以按照不同标准（默认是评分）进行排序，包括更新日期、添加日期，发表时间和引用次数等。无论是想要用新的还是想用被使用多的，都可以满足。此外，还可以在搜索栏中继续进行二次搜索，支持联想，会自动提示可能想要搜索的词条。</p>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190815154416.png" alt=""></figure>
<p>如果你找到感兴趣的工具，点击工具名字即可进入详情页。这里以 BWA 举例，如下所示。</p>
<p>第一部分是工具的属性标签，包括这个工具的开发成熟度，协议、工具类型、开发语言和操作系统等。右边是工具的受欢迎程度，例如引用次数信息。</p>
<p>第二部分是工具相关的分析流程，其中每一步骤显示的都是语义标签，可以点击进行二次搜索。例如 BWA 的输入数据是 <strong>fasta</strong> 或者 <strong>fastq</strong> 文件，可以进行<strong>索引</strong>和<strong>比对</strong>，输出内容是 <strong>sam</strong> 文件。如果点击 <strong>fastq</strong>，就会看到所有输入数据支持 fastq 的工具。</p>
<p><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190815154307.png" alt=""><br>
第三部分内容则是工具对应的开发者联系方式，文档地址和工具下载地址；第四部分是工具相关文献的链接和文献引用情况。</p>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190815154309.png" alt=""></figure>
<h2 id="工具有了然后呢">工具有了然后呢</h2>
<p>如文章开头所说，如果我们能从测序数据类型和 bioconductor 包和综合性工具这三个层面进行查找，总可以找到一些（或许）适合自己的工具，但是找的到可不意味着用的对和用的好。就像听过很多道理，依然过不好这一生，我们听过很多工具，可能依然解决不了手上的问题。而且对于做生物信息的人来说，搜到一大把的工具不见得是好事。</p>
<p>文末，祝你上得了厅堂，下得了厨房，找得了工具，发的了文章。</p>
<hr>
<figure data-type="image" tabindex="7"><img src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png" alt=""></figure>
<p><strong>本文作者</strong>：思考问题的熊</p>
<p><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-nd/4.0">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议 (CC BY-NC-ND 4.0)</a> 进行许可。</p>
<figure data-type="image" tabindex="8"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190628083754.png" alt="扫码即刻沟通"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[听说你也有 emojifont 的字体使用困惑]]></title>
        <id>https://kaopubear.top//post/2019-08-13-emojifont-debug</id>
        <link href="https://kaopubear.top//post/2019-08-13-emojifont-debug">
        </link>
        <updated>2019-08-13T07:46:25.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="问题复现">问题复现</h2>
<blockquote>
<p>Y 叔有一个神包，能够在 ggplot 图层里随心所欲的添加各种 emoji，然而很多人在使用的时候却不能「随心所欲」，经常一行函数输进去一张白板输出来。最近在我的星球里也有人提到这个问题，作为一个无趣的人我虽然之前没有实际使用过这个有趣的包，但是今天要被迫营业了。</p>
</blockquote>
<p>在反馈中可以看到 Windows 中的基本错误信息有两类：一是提示 warning，虽然能出图但是图和想象中的样子不一样；二是提示 warning，然后直接输出一个空白图层。其中 warning 的内容是： <code>In grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : Windows 字体数据库里没有这样的字体系列。</code></p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="问题复现">问题复现</h2>
<blockquote>
<p>Y 叔有一个神包，能够在 ggplot 图层里随心所欲的添加各种 emoji，然而很多人在使用的时候却不能「随心所欲」，经常一行函数输进去一张白板输出来。最近在我的星球里也有人提到这个问题，作为一个无趣的人我虽然之前没有实际使用过这个有趣的包，但是今天要被迫营业了。</p>
</blockquote>
<p>在反馈中可以看到 Windows 中的基本错误信息有两类：一是提示 warning，虽然能出图但是图和想象中的样子不一样；二是提示 warning，然后直接输出一个空白图层。其中 warning 的内容是： <code>In grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : Windows 字体数据库里没有这样的字体系列。</code></p>
<!--more-->
<p>以下是两个错误示例</p>
<pre><code class="language-r">library(tidyverse)
library(emojifont)
load.emojifont()
ggplot() +
    geom_emoji(&quot;rose&quot;, color='steelblue') +
    theme_void()
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190814090813.png" alt=""></figure>
<p>虽然这个图画出来了，但是这图和正确的图竟然不一样。下图为正确的图。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190814090950.png" alt=""></figure>
<p>另一个错误示例是：</p>
<pre><code class="language-r">ggplot() + geom_fontawesome(&quot;fa-github&quot;, color='black') + theme_void()
</code></pre>
<p>输出 warning 信息后直接扔出一个白板。</p>
<pre><code>Warning message:
In grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  Windows 字体数据库里没有这样的字体系列
</code></pre>
<p>因为输出白板这里就不放截图了。</p>
<h2 id="问题定位">问题定位</h2>
<p>这个问题有两个地方需要注意，一般我们说遇到<code>warning</code>不用管，但是这里不得不管因为图没展示出来；二是没有报<code>error</code>说明本身代码或者调用的函数没有问题，也就是**图没有出来不是画图（代码）的问题而是打印（设备）的锅。**这里的设备是指图形设备，所以不妨换个图形设备打印一下看看效果，比如用最基本的<code>png()</code>进行测试。</p>
<pre><code class="language-r">png(file = &quot;test_emoji.png&quot;)
ggplot() +
    geom_emoji(&quot;rose&quot;, color='steelblue') +
    theme_void()
dev.off()
</code></pre>
<p>需要注意的是使用<code>png()</code>打开一个图形设备后，在运行画图代码时就没有了上文的警告内容。然后看保存的结果也是正常的。当然，如果使用<code>ggsave</code>去保存也没有任何问题。</p>
<figure data-type="image" tabindex="3"><img src="_v_images/20190814093759482_12804.png" alt=""></figure>
<p>至此问题就基本定位应该是 RStudio graphics device 和这个包并不兼容。接下来就是查一查有没有好的解决方案。</p>
<h2 id="解决方案">解决方案</h2>
<p>作为一个如此成熟和受欢迎的 R 包，遇到问题以后和我们通常的 debug 思路是不太一样的。</p>
<p>一般情况下我们会在搜索引擎中输入主要的报错信息，然后加上错误工具的名字等进行检索。但是现在不妨直接去对应的 GitHub 查看已有的 issue。当我打开 emojifont 的 issue 列表时，我感觉这个问题已经解决了。</p>
<p>基本上所有关闭的 issue 都集中在字体上，其中涉及到了 Windows 和 macOS，再看看那些没有关闭的问题，基本也都是和字体相关。（相比此时 Y 叔已经心力交瘁）</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190814104638.png" alt=""></figure>
<p>简单翻了两个问题，就是我们文章开头提到的内容。既然用户已经有了这么多困扰，把写好文档作为 R 包开发准则的 Y 叔想必会在文档里写清楚这个问题。二话不说，立刻打开文档去瞅瞅。打开以后就会发现在目录上清晰的写着一个** limitation**。本能促使我点开它，然后看到了下面这样一段话：</p>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190814104642.png" alt=""></figure>
<p>也就是说，因为 emojifont 依赖于 showtext ，而 showtext 本身和 RStudio GD 存在兼容性问题，所以在 Rstudio 中会出现各种问题，这也是为什么直接用<code>png()</code>保存则正常。因此给出的解决建议是即便在使用 Rstudio，也还是用系统本身的 GD 去打印，在 Windows 中就用 <code>windows()</code> 在 Mac 中就用 <code>quartz()</code>，然后万事大吉功成身退。</p>
<p>如下图所示</p>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190814104646.png" alt=""></figure>
<h2 id="问题复盘">问题复盘</h2>
<p>关于 emojifont 的实现方式，其实在文档中一开始就写了是用 showtext 去 render 字体。它本身只是打印出 emoji 对应的 unicode。因为我是先收到了 bug 才去使用这个包，所以本身就没有按照正常的顺序去学习。</p>
<p>学习使用一个工具时，第一步就应该是先去看官方文档和使用说明。其实 Y 叔这个包的说明文档已经十分精简了，但还是有很多人可能从来没有打开过。另外，在使用成熟的工具遇到问题时，也要学会查看已有的 issue ，你的问题可能早在两三年前就已经被开发者回答和解释过。</p>
<h2 id="one-more-thing">One More Thing</h2>
<p>问题解决之后还有一个小的发现。</p>
<p>在 Rstudio 上使用 Rmd 写文章，如果常规操作导出 HTML 那 emojifont 还是会出现无法正确打印的问题。解决方案其实就在 showtext 的说明文档中 。需要注意如下两点。</p>
<ol>
<li>在文档的 header 添加 <code>fig_retina:1</code></li>
<li>在使用到 emojifont(showtext) 的代码块中，添加<code>fig.showtext = TRUE</code></li>
</ol>
<p>Rmd 代码如下：</p>
<figure data-type="image" tabindex="7"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190814104948.png" alt=""></figure>
<p>导出 HTML 效果如下：</p>
<figure data-type="image" tabindex="8"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190814104953.png" alt=""></figure>
<hr>
<figure data-type="image" tabindex="9"><img src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png" alt=""></figure>
<p><strong>本文作者</strong>：思考问题的熊</p>
<p><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-nd/4.0">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议 (CC BY-NC-ND 4.0)</a> 进行许可。</p>
<figure data-type="image" tabindex="10"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190628083754.png" alt="扫码即刻沟通"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[首届生物信息人才发展论坛背后的故事]]></title>
        <id>https://kaopubear.top//post/2019-08-07-thefirstbiotraineeforum</id>
        <link href="https://kaopubear.top//post/2019-08-07-thefirstbiotraineeforum">
        </link>
        <updated>2019-08-07T05:55:17.000Z</updated>
        <summary type="html"><![CDATA[<p>第一届生物信息人才发展论坛落幕已经半月有余，算上前前后后的准备周期，在大家眼中一个「小而美」的论坛其实陆陆续续持续了一个多月的时间。</p>
<p>作为组织者和参会者之一，按道理应该有很多话要说才对。但是过去一个多月尤其是论坛期间的高度集中和紧张，导致我突然变得不知道该从何说起。和健明聊起来，他也是同样的感受。尽管如此，因为没有记录就没有发生，所以还是要从组织者和参会者两个不同的角度做一些记录和回顾，聊聊自己的感受和想法。</p>
]]></summary>
        <content type="html"><![CDATA[<p>第一届生物信息人才发展论坛落幕已经半月有余，算上前前后后的准备周期，在大家眼中一个「小而美」的论坛其实陆陆续续持续了一个多月的时间。</p>
<p>作为组织者和参会者之一，按道理应该有很多话要说才对。但是过去一个多月尤其是论坛期间的高度集中和紧张，导致我突然变得不知道该从何说起。和健明聊起来，他也是同样的感受。尽管如此，因为没有记录就没有发生，所以还是要从组织者和参会者两个不同的角度做一些记录和回顾，聊聊自己的感受和想法。</p>
<!--more-->
<h2 id="办生信技能树自己的会议">办生信技能树自己的会议</h2>
<p>健明有举办一场会议的念头由来已久，大概要追溯到两年前。早期小范围聊起的时候，我一直都是打击为主顺带安抚。这其中可以给出的理由很多，比如团队影响力问题，嘉宾问题，内部时间如何协调以及很现实的场地和经费问题等等。归根到底，我最担心的问题只有一个，就是团队里大家的凝聚力和执行力问题。</p>
<p>实打实的举办一场活动和平日大家在群里吹吹牛逼划划水不同，需要原本就不多的几个团队成员拿出大量的时间在很多琐碎的事务上，而且这些人目前大多数都是硕士或者博士在读，本身的工作压力都很重。不过，随着健明在珠海的线下团队快速成长，我对办一次生信技能树自己的会议其实也从最初的否定逐渐转变扭扭捏捏的符合进而更多的变为了一种期待。</p>
<p>从今年开始，伴随着健明的「我的生信五周年巡讲」，线下团队已经经历了十几次现场培训的历练。不少曾经早期的实习生和学徒已经成为了线下团队的中坚力量（当然，更多的人可能选择了放弃）甚至是正式员工，这可以说是「人和」；线下团队所在地<strong>横琴澳门青年创业谷</strong>在场地和会议服务方面也可以给我们提供大量的支持，这可以说是「地利」。生信技能树走到今天，一方面我们已经有了还不错的受众基础，作为一个特别接地气特别有人气的组织可以明显感受到大家的热情；另一方面，目前国内比较知名的几个生物信息会议都是以学术为主，有些非学术性质的会议又太过商业，找来找去似乎没有一个特别针对生信相关学生以及从业人员发展的会议，这可以算是「天时」。</p>
<p>从上述几点来看，举办一次生信技能树自己的会议已经不是一个需要讨论的议题而变成了一件需要执行的事情。</p>
<h2 id="痛并快乐的筹备过程">痛并快乐的筹备过程</h2>
<p>从决定举办并确定日期算起，留给我们的实际筹备时间也就是 30 天不到。有过参加会议经历的人应该都懂，对于大部分会议来说可能临近 30 天的时候报名都截止了，而我们才从零开始。在这段时间里，所有的工作都需要筹备小组来完成，没有任何专业的会务公司为我们提供帮助。这件事想想还挺有挑战性。</p>
<p>为了避免和同时期其他几个专业会议的「正面冲突」，我们把论坛的主题限定在了「生物信息人才发展」这个角度。一方面，<strong>帮助 10 万人入门生物信息</strong>是生信技能树的目标之一，但是我们内心深处也不清楚如果真帮 10 万人入门生信，等待大家的将会是什么；另一方面，对于生信技能树的大部分朋友来说，大家普遍关注的也是如何更好的实现自我成长和发展。从这个主题延展开来，我们构思了企业、职业和学术三个专场，希望可以从这三个方向让大家更全面的认识和理解生物信息行业（学科），也听一听诸多大佬和过来人的建议甚至是困惑。</p>
<p>在整个筹备过程中，我们努力调用大学和研究生期间一些残存的活动会议组织记忆以及自身参加各种会议的经历，筹备小组成员也从最初的几个人逐渐扩大到十几人。即便大家都是业余时间交流，但我们还是尽量让工作变得明确可执行。</p>
<p>把有限的人手分为嘉宾联络和线下沟通以及宣传设计等几个小组。说是小组，其实很多也就是一到两个人，比如所有的海报、工作证和会刊等物料设计都是出自徐妍之手；包括场地和茶歇等在内的所有线下安排沟通事宜都由敏敏和小淑两个人完成；慧美、嘉鋆和 Kim 在内的每一个嘉宾联络人都要负责 9-10 个嘉宾从会议筹备直到会议结束所有具体沟通事宜。每个人，都像是一个队伍。</p>
<p>因为人手实在有限，会议期间，国灵一个人完成了所有嘉宾的酒店住宿安排和接待工作；贾方完成了所有参会者的报名和后期沟通工作，4 位浙大的高材生被我们「大材小用」安排到了签到处，完成了所有证件核验、签到以及物料发放工作。除此之外，线下团队的几位讲师和助教在本身有教学任务的情况下，也都在会议期间承担了非常重要的工作。在此不一一列出，但是一并表达大大的感谢！</p>
<h2 id="会议筹备的问题和收获">会议筹备的问题和收获</h2>
<p>论坛结束之后，我们接收到的大多数反馈都是正面的。不过在我看来，这更多的是源于对生信技能树以及健明的喜爱，同时还有对我们这支「游击队」的宽容。</p>
<p>因为人手及其有限且可以投入的精力和时间有限，我们在和外部的沟通上暴露了很多问题，例如和赞助商以及协办方的沟通。除此以外，在会议嘉宾和内容以及节奏的把控上我们也有极大的提升空间，这些都有待于在第二届论坛的时候加以改进。同时在筹备过程中也有一点心得，在此一并整理出来。</p>
<ul>
<li>
<p>提高效率</p>
<p>为了尽可能提高沟通和协作效率又不让事情太复杂，我们没有选择很专业的协作工具。因为所有交流都是基于微信的，所以会议筹备过程中所有文本资料都使用了在线的腾讯文档。其中嘉宾通过问卷形式填写个人和演讲信息方便后期整理统计，筹备小组成员拥有所有文档的查看和编辑权限，避免了在群里重复上传各种版本的文档。</p>
</li>
<li>
<p>明确分工</p>
<p>大伙合作完成一件事情，最常见的问题是讨论起来热火朝天，落实起来鸦雀无声，用老话来说「三个和尚没水喝」。所以，该头脑风暴的时候就群策群力，该落实工作的时候就明确到人。三十个人做一件事情需要花费的时间不仅做不到三个人的十分之一，反而很可能是三个人的十倍。如果一件事情比较着急，不要在群里发问「谁可以把这件事情做一下」，而是直接问你信任的人能不能把这件事情处理一下。</p>
</li>
<li>
<p>讲明诉求</p>
<p>涉及到合作，最大的障碍永远在沟通。当我们抱怨对方执行力的时候很可能问题出在自己没有把事情说清楚。传递一项工作的时候，尽量多重复几遍。其中一遍要说清楚自己希望对方做什么，第二遍让对方复述一下他理解的诉求，第三篇要说清楚做这件事的目的，最后要咨询对方是否有更好的想法和见解。通常，对方一开始的理解都和你的想法有不少出入，这样一来就会有「重来一遍」的风险。</p>
</li>
<li>
<p>做好分内的事</p>
<p>在合作的过程中，首先要完成好自己该做的事情，再去发表自己观点。如果自己的任务是 A，就不要过分关心 B 和 C 的完成进度，难免会给人一种「你行你来」和「你都干点啥」的感觉。</p>
</li>
<li>
<p>做好挨骂准备</p>
<p>活动的成功之处都是嘉宾和参与者的功劳，活动的失败之处都是组织者的原因。对于组织者来说，最强的存在感就是没有存在感，类似于跑一个程序没有输出任何消息就是最好的消息。</p>
</li>
</ul>
<h2 id="一个准毕业生的困惑">一个准毕业生的困惑</h2>
<p>马上就要开始漫漫人生路的第 27 个年头，不知不觉也走到了硕博阶段第五年。一个明显的感受是越来越困惑，没有想清楚自己毕业后要做什么以及能做什么。</p>
<p>由于同时还要承担两天论坛主持人的工作，带着「毕业后要做什么以及能做什么」的困惑，我完整听完了所有嘉宾的分享。接下来就顺着「毕业工作」这条线，整理一下论坛中嘉宾提到的部分关于行业，需求和能力培养相关的内容。</p>
<h3 id="公司层面的架构要求">公司层面的架构要求</h3>
<p>烈冰生物的创始人宗杰博士提到了烈冰目前的公司主要人员架构：</p>
<ul>
<li>研发部：平台搭建，需要代码能力极强，掌握多种涉及模式，有分布式和大数据等经验。</li>
<li>生信部：上线新工具进行平台运维，需要对各种工具敏锐，深入理解各种工具流程及相关参数，可以快速学习，需要一定的代码能力。</li>
<li>项目部：基于平台分析项目，无需会写代码，了解各种工具流程，就是各种结果文件，细心耐心善于学习。</li>
<li>技术部：生物学意义挖掘，生物医学知识要求高，有高质量论文更佳，对生物学问题要敏感，有自己的见解。了解各种组学数据库和新的分析方法。</li>
</ul>
<p>结合海普洛斯基云惠康等公司的招聘要求，多数集中在如下一些内容：</p>
<ul>
<li>对相关行业要有兴趣和使命感</li>
<li>良好的沟通和合作能力以及学习能力</li>
<li>熟练使用 Linux 系统，熟练使用 /Python/Perl/R 中至少一种编程语言</li>
<li>熟练掌握各种生物信息工具和分析流程，熟悉常用的生物信息学数据库，对生物统计学原理及意义有深刻应用能力</li>
<li>有良好的英文阅读和文档写作能力</li>
<li>有相关应用产品、分析流程开发经验，发表过相关论文者优先</li>
</ul>
<h3 id="个人层面的能力培养">个人层面的能力培养</h3>
<p>综合古奥基因的肖世俊博士在生信相关个人能力培养方面给出了如下一些观点和建议：</p>
<p>生物信息学正在逐渐成为一门工具性学科，逐渐成为所有生物学学生必备的知识内容，单纯的数据流程分析工作会逐渐被机器取代。生物信息学的下游发展会分为两个主要的方向：一是分析工具的开发，需要更多的 IT 和算法基础；二是产业应用的开发，需要更多对于行业的理解。</p>
<p>如果把生物信息作为一项职业，其能力可以分为技术和沟通两种维度。其中技术维度包括熟练程度、项目经历和学习能力等，沟通维度包括汇报能力、抗压能力、领导能力和全局观念等。在初期，技术维度更加关键，随着职业的发展沟通维度则越发重要。</p>
<p>GeneDock 云平台研发总监李明则建议大家要学会在工作中知其所以然，善于总结日常遇到的问题和学会有效沟通，同时能系统的学习编程知识和相关业务。以编程知识学习为例，其中包括语法、调试技巧、算法知识和编程原则等内容。</p>
<h3 id="优秀的人有哪些共同点">优秀的人有哪些共同点</h3>
<p>在论坛现场看到了各种各样的嘉宾，也看到了太多的可能性。其中有一部分是之前就非常熟的「同龄人」，比如果子、洲更和海涛等等。虽然他们每个人的特点不同风格各异，但我还是尝试从他们的身上总结一些共有的优秀特质，找到自己的差距和努力方向。总结来总结去，好像就是如下几点：对新鲜事物的好奇心和热情；持续不断的学习；从实际的工作场景出发不断扩宽自己的知识和认知边界；持续不断的输出。</p>
<p>嗯，大概就是这些。</p>
<hr>
<figure data-type="image" tabindex="1"><img src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png" alt=""></figure>
<p><strong>本文作者</strong>：思考问题的熊</p>
<p><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-nd/4.0">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议 (CC BY-NC-ND 4.0)</a> 进行许可。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190628083754.png" alt="扫码即刻沟通"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[上手 MacBook Pro 基础操作和配置]]></title>
        <id>https://kaopubear.top//post/2019-07-30-learnusemac1</id>
        <link href="https://kaopubear.top//post/2019-07-30-learnusemac1">
        </link>
        <updated>2019-07-30T05:46:39.000Z</updated>
        <summary type="html"><![CDATA[<p>这个月，我成为了一名Mac用户。macOS诞生于1984年，经历了35年的发展之后，其在全球操作系统市场中的份额已经不到10%。</p>
<p>macOS是第一个商用的图形界面操作系统，和Windows相比更加注重人际交互的细节感知。例如，在macOS中无需关注剩余内存空间，因为系统首先会占满所有内存，然后根据软件使用情况进行自动调整从而保证系统的稳定。</p>
<h2 id="基础操作和设置">基础操作和设置</h2>
<h3 id="不在触控板的触控板设置">不在触控板的触控板设置</h3>
<p>触控板是Mac优秀使用体验的一个直观表现，各种多指操作非常顺滑。在<strong>系统偏好设置</strong>中的<strong>触控板</strong>，可以完成大多数的设置操作。例如使用轻点来实现点按的效果，使用双指从右边缘向左轻扫查看通知。但是还有几项我们常用的操作被藏在了偏好设置的其他地方。</p>
<p>使用鼠标时一个常用的操作就是一次选择多个文件进行移动，而通过触控版完整这项相同的工作则十分费力。在macOS中可以通过在<strong>辅助功能</strong>中开启<strong>三指拖移</strong>来实现同样的功能。开启该功能后可以方便的进行文字和文件多选以及拖移操作。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这个月，我成为了一名Mac用户。macOS诞生于1984年，经历了35年的发展之后，其在全球操作系统市场中的份额已经不到10%。</p>
<p>macOS是第一个商用的图形界面操作系统，和Windows相比更加注重人际交互的细节感知。例如，在macOS中无需关注剩余内存空间，因为系统首先会占满所有内存，然后根据软件使用情况进行自动调整从而保证系统的稳定。</p>
<h2 id="基础操作和设置">基础操作和设置</h2>
<h3 id="不在触控板的触控板设置">不在触控板的触控板设置</h3>
<p>触控板是Mac优秀使用体验的一个直观表现，各种多指操作非常顺滑。在<strong>系统偏好设置</strong>中的<strong>触控板</strong>，可以完成大多数的设置操作。例如使用轻点来实现点按的效果，使用双指从右边缘向左轻扫查看通知。但是还有几项我们常用的操作被藏在了偏好设置的其他地方。</p>
<p>使用鼠标时一个常用的操作就是一次选择多个文件进行移动，而通过触控版完整这项相同的工作则十分费力。在macOS中可以通过在<strong>辅助功能</strong>中开启<strong>三指拖移</strong>来实现同样的功能。开启该功能后可以方便的进行文字和文件多选以及拖移操作。</p>
<!--more-->
<p>在Windows中可以通过<code>win+p</code>进行锁屏，讲鼠标移动到桌面右下角可以显示桌面。在macOS中类似的功能被称作<strong>触发角</strong>，在系统偏好设置的<strong>调度中心</strong>中，点击<strong>触发角</strong>就可以进行设置。如下图所示，每个角都可以设置常用操作。设置后，只需要轻松滑动一下触控版，就可以实现对应的功能。我目前常用的是锁屏和启动屏保。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190730222339.png" alt=""></figure>
<h3 id="预览及预览插件">预览及预览插件</h3>
<p>之前用Windows的时候就非常羡慕Mac的「一指禅」预览功能，彼时听闻在macOS上万物皆可「空格」预览，无论是图片还是PDF或者是什么文档。</p>
<p>真正用上MacBook Pro之后确实体会到了它的厉害。最新系统的预览可以直接编辑图片和PDF文档，其中很多小的功能甚至比专业的编辑器还要方便。以PDF距离，曾经困扰很多人的PDF「签名」问题，可以直接在编辑模式下通过触控版书写或者通过摄像头进行拍照。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190801101824.png" alt=""></figure>
<p>另外，局部高亮和放大功能针对很多截图来说都非常实用。</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190801101808.png" alt=""></figure>
<h3 id="markdown及脚本预览">markdown及脚本预览</h3>
<p>在实际体验中，预览功能对一些我们目前常用的文本无法很好的预览。比如markdown文本和各种脚本均不支持高亮。好在有很对第三方的预览插件可以解决这一问题。</p>
<p>例如 <a href="https://github.com/toland/qlmarkdown">qlmarkdown</a> 可以提供markdown文本的渲染后预览，而 <a href="https://github.com/anthonygelibert/QLColorCode">qlcolorcode</a> 则可以很好的实现代码高亮。如下图所示，R脚本可以正确的识别。</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190801102703.png" alt=""></figure>
<h3 id="聚焦搜索">聚焦搜索</h3>
<p>macOS自带的聚焦搜索（spotlight）可以解决日常的绝大部分搜索需求，无论是查找文件查找目录。在全局使用<code>Command-空格键</code> 都可以调出搜索框。</p>
<p>找到需要的内容后，如果想要直接打开可以使用<code>return</code>，如果有多个重名文件可以通过短按<code>command</code>查看文件路径，如果想打开文件所在位置则可以使用 <code>command+return</code></p>
<p>初次之外，还可以在搜索框中直接进行运算和各种单位的转换。另外如果你想直接通过搜索引擎来搜索自己输入的内容，可以直接按 <code>command+b</code> 。</p>
<p>掌握了上面几种简单的快捷键，搜索效率就会大大提高了。</p>
<h3 id="自带中文输入法">自带中文输入法</h3>
<p>macOS自带的中文输入法十分简洁克制，经过简单的学习摸索后我感觉完全不需要再下载什么第三方输入法了。其中有几个常用的技巧可以帮助我们快速的打出想要的文字和复杂的符号。</p>
<p>就文字而言，自带输入法支持<strong>按照声调来选词</strong>。你可以在输入拼音后按 <code>tab</code> 键，依次会出现从第一个汉子第一声到第四声对应的候选词。</p>
<p>另外，输入法支持包括词频部首笔画表情在哪的多种选词模式。以输入「微笑」为例。</p>
<p>首先通过键盘右上角的加号调出选词框，然后再使用 <code>tab</code>键就可以切换选词方式。当你切换到表情方式的时候就可以看到所有和「微笑」相关的表情啦。如下图所示。</p>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190801171156.png" alt=""></figure>
<p>还有一个隐藏的技能是如何快速的查找特殊符号以及颜文字。要知道这一点，首先需要学会如何正确的输入省略号。在自带输入法中，正确打出省略号的方式是在中文输入情况下使用 <code>shift+6</code> ，这时，你除了可以看到省略号之外还会看到符合和颜文字两个选项，可以通过 <code>tab</code> 进行切换同时使用键盘右上角的加号和减号键快速翻页。</p>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190801171209.png" alt=""></figure>
<figure data-type="image" tabindex="7"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190801195034.png" alt=""></figure>
<h3 id="快捷键查询">快捷键查询</h3>
<p>因为用了Mac之后就意味着放弃了鼠标（也可能没准哪天又用回去了），所以快捷键的使用就显得尤为重要了。快捷键因为记不住的原因在很多时候并不快捷，好在macOS给了一个全局结局方法，可以帮助我们快速找到当前软件相关的操作位置。</p>
<p>在任意软件中使用 <code>shift+command+/</code> 都可以调出菜单栏中的搜索窗口。这个搜索窗口可以帮助你找到需要的操作，只要这个软件中有相关的操作，就可以用这个快捷键通过搜索快速的调用对应操作。</p>
<p>例如我在typora中想要插入一个超链接，但是忘记了快捷键是什么。于是我就首先调出搜索栏，然后输入「链接」，这时可以看到对应的操作有「链接引用」和「超链接」两个操作，然后通过方向键选择想要执行的命令，一方面会自动用蓝色箭头为你标注出其在菜单栏中的实际位置，另一方面只需要按下回车就可以直接执行对应操作。非常人性化。</p>
<figure data-type="image" tabindex="8"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190801180145.png" alt=""></figure>
<h3 id="小结">小结</h3>
<p>掌握了上面几个基本操作和设置之后，手里的MacBook Pro就感觉更好用了一点。</p>
<hr>
<figure data-type="image" tabindex="9"><img src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png" alt=""></figure>
<p><strong>本文作者</strong>：思考问题的熊</p>
<p><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-nd/4.0">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议 (CC BY-NC-ND 4.0)</a> 进行许可。</p>
<figure data-type="image" tabindex="10"><img src="https://raw.githubusercontent.com/fei0810/image-host/master/img/20190628083754.png" alt="扫码即刻沟通"></figure>
]]></content>
    </entry>
</feed>